{
  "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
  "language": "python",
  "definitions": [
    {
      "name": "trainer::class PINNTrainer:\n    \"\"\"Physics-Informed Neural Network trainer.\"\"\"\n\n    def __init__(self, config_path=None):\n        \"\"\"Initialize the trainer.\"\"\"\n        self.config_path = config_path\n        self.load_config()\n\n    def load_config(self):\n        \"\"\"Load configuration from YAML file.\"\"\"\n        import yaml\n\n        config_file = \"config_pinn.yaml\" if not self.config_path else self.config_path\n        if Path(config_file).exists():\n            with open(config_file, 'r') as f:\n                self.config = yaml.safe_load(f)\n        else:\n            # Default configuration\n            self.config = {\n                'xpinn': {\n                    'layers1': [2, 400, 400, 100, 1],\n                    'layers2': [2, 100, 100, 40, 1],\n                    'mu1': 1,\n                    'mu2': 1,\n                    'scaling_factor': 20,\n                    'multiplier': 20\n                },\n                'training': {\n                    'max_iter': 25000,\n                    'adam_lr': 0.0008,\n                    'n_f1': 1000,\n                    'n_f2': 200,\n                    'n_ub': 500,\n                    'n_i1': 250\n                },\n                'physics': {\n                    'equation': 'poisson',\n                    'domain_decomposition': 'interface'\n                }\n            }\n\n    def generate_training_data(self):\n        \"\"\"Generate training data for XPINN.\"\"\"\n        # Domain bounds\n        lb = np.array([-1.0, -1.0])\n        ub = np.array([1.0, 1.0])\n\n        # Boundary points\n        N_ub = self.config['training']['n_ub']\n        X_ub = lb + (ub - lb) * np.random.rand(N_ub, 2)\n        ub = np.zeros((N_ub, 1))\n\n        # Collocation points for subdomain 1\n        N_f1 = self.config['training']['n_f1']\n        X_f1 = lb + (ub - lb) * np.random.rand(N_f1, 2)\n\n        # Collocation points for subdomain 2\n        N_f2 = self.config['training']['n_f2']\n        X_f2 = lb + (ub - lb) * np.random.rand(N_f2, 2)\n\n        # Interface points\n        N_i1 = self.config['training']['n_i1']\n        X_i1 = np.zeros((N_i1, 2))\n        X_i1[:, 0] = np.random.rand(N_i1)\n        X_i1[:, 1] = 0.0  # Interface at y=0\n\n        # Interface solution (can be zero or some known function)\n        u_i1 = np.zeros((N_i1, 1))\n\n        return X_ub, ub, X_f1, X_f2, X_i1, u_i1\n\n    def train(self, results_dir):\n        \"\"\"Main training function.\"\"\"\n        print(\"Setting up XPINN model...\")\n\n        # Get configuration\n        layers1 = self.config['xpinn']['layers1']\n        layers2 = self.config['xpinn']['layers2']\n        mu1 = self.config['xpinn']['mu1']\n        mu2 = self.config['xpinn']['mu2']\n\n        # Generate training data\n        X_ub, ub, X_f1, X_f2, X_i1, u_i1 = self.generate_training_data()\n\n        # Create XPINN model\n        model = XPINN(layers1, layers2, mu1, mu2)\n\n        # Setup training\n        model.setup_training(X_ub, ub, X_f1, X_f2, X_i1, u_i1)\n\n        print(\"Starting training...\")\n        max_iter = self.config['training']['max_iter']\n\n        # Training loop\n        start_time = time.time()\n        loss_history = []\n\n        for it in range(max_iter):\n            model.train_step()\n\n            if it % 1000 == 0:\n                loss1, loss2 = model.get_loss()\n                total_loss = loss1 + loss2\n                loss_history.append(total_loss)\n\n                elapsed = time.time() - start_time\n                print(f'Iteration: {it}, Loss1: {loss1:.3e}, Loss2: {loss2:.3e}, Total: {total_loss:.3e}, Time: {elapsed:.2f}s')\n\n        total_time = time.time() - start_time\n        print(f\"Training completed in {total_time:.2f} seconds\")\n\n        # Save model\n        model_save_path = results_dir / \"model\"\n        model_save_path.mkdir(exist_ok=True)\n\n        # Save model weights (in a simple format)\n        model_weights = {\n            'weights1': [w.eval(session=model.sess).tolist() for w in model.weights1],\n            'biases1': [b.eval(session=model.sess).tolist() for b in model.biases1],\n            'A1': [a.eval(session=model.sess) for a in model.A1],\n            'weights2': [w.eval(session=model.sess).tolist() for w in model.weights2],\n            'biases2': [b.eval(session=model.sess).tolist() for b in model.biases2],\n            'A2': [a.eval(session=model.sess) for a in model.A2]\n        }\n\n        with open(model_save_path / \"xpinn_weights.json\", 'w') as f:\n            json.dump(model_weights, f)\n\n        # Save training metrics\n        metrics = {\n            'max_iter': max_iter,\n            'adam_lr': self.config['training']['adam_lr'],\n            'n_f1': self.config['training']['n_f1'],\n            'n_f2': self.config['training']['n_f2'],\n            'n_ub': self.config['training']['n_ub'],\n            'n_i1': self.config['training']['n_i1'],\n            'total_time': total_time,\n            'final_loss1': loss1,\n            'final_loss2': loss2,\n            'final_total_loss': loss1 + loss2,\n            'loss_history': loss_history\n        }\n\n        with open(results_dir / \"training_metrics.json\", 'w') as f:\n            json.dump(metrics, f, indent=2)\n\n        # Generate test predictions\n        print(\"Generating test predictions...\")\n        N_test = 100\n        X_test1 = np.random.rand(N_test, 2) * 2 - 1  # [-1, 1] domain\n        X_test2 = np.random.rand(N_test, 2) * 2 - 1\n\n        u_pred1, u_pred2 = model.predict(X_test1, X_test2)\n\n        # Save predictions\n        test_results = {\n            'X_test1': X_test1.tolist(),\n            'X_test2': X_test2.tolist(),\n            'u_pred1': u_pred1.tolist(),\n            'u_pred2': u_pred2.tolist()\n        }\n\n        with open(results_dir / \"test_predictions.json\", 'w') as f:\n            json.dump(test_results, f, indent=2)\n\n        print(\"PINN training completed!\")\n        print(f\"Results saved to: {results_dir}\")",
      "type": "classs",
      "category": "definition",
      "start_line": 14,
      "end_line": 180,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "class PINNTrainer:\n    \"\"\"Physics-Informed Neural Network trainer.\"\"\"\n\n    def __init__(self, config_path=None):\n        \"\"\"Initialize the trainer.\"\"\"\n        self.config_path = config_path\n        self.load_config()\n\n    def load_config(self):\n        \"\"\"Load configuration from YAML file.\"\"\"\n        import yaml\n\n        config_file = \"config_pinn.yaml\" if not self.config_path else self.config_path\n        if Path(config_file).exists():\n            with open(config_file, 'r') as f:\n                self.config = yaml.safe_load(f)\n        else:\n            # Default configuration\n            self.config = {\n                'xpinn': {\n                    'layers1': [2, 400, 400, 100, 1],\n                    'layers2': [2, 100, 100, 40, 1],\n                    'mu1': 1,\n                    'mu2': 1,\n                    'scaling_factor': 20,\n                    'multiplier': 20\n                },\n                'training': {\n                    'max_iter': 25000,\n                    'adam_lr': 0.0008,\n                    'n_f1': 1000,\n                    'n_f2': 200,\n                    'n_ub': 500,\n                    'n_i1': 250\n                },\n                'physics': {\n                    'equation': 'poisson',\n                    'domain_decomposition': 'interface'\n                }\n            }\n\n    def generate_training_data(self):\n        \"\"\"Generate training data for XPINN.\"\"\"\n        # Domain bounds\n        lb = np.array([-1.0, -1.0])\n        ub = np.array([1.0, 1.0])\n\n        # Boundary points\n        N_ub = self.config['training']['n_ub']\n        X_ub = lb + (ub - lb) * np.random.rand(N_ub, 2)\n        ub = np.zeros((N_ub, 1))\n\n        # Collocation points for subdomain 1\n        N_f1 = self.config['training']['n_f1']\n        X_f1 = lb + (ub - lb) * np.random.rand(N_f1, 2)\n\n        # Collocation points for subdomain 2\n        N_f2 = self.config['training']['n_f2']\n        X_f2 = lb + (ub - lb) * np.random.rand(N_f2, 2)\n\n        # Interface points\n        N_i1 = self.config['training']['n_i1']\n        X_i1 = np.zeros((N_i1, 2))\n        X_i1[:, 0] = np.random.rand(N_i1)\n        X_i1[:, 1] = 0.0  # Interface at y=0\n\n        # Interface solution (can be zero or some known function)\n        u_i1 = np.zeros((N_i1, 1))\n\n        return X_ub, ub, X_f1, X_f2, X_i1, u_i1\n\n    def train(self, results_dir):\n        \"\"\"Main training function.\"\"\"\n        print(\"Setting up XPINN model...\")\n\n        # Get configuration\n        layers1 = self.config['xpinn']['layers1']\n        layers2 = self.config['xpinn']['layers2']\n        mu1 = self.config['xpinn']['mu1']\n        mu2 = self.config['xpinn']['mu2']\n\n        # Generate training data\n        X_ub, ub, X_f1, X_f2, X_i1, u_i1 = self.generate_training_data()\n\n        # Create XPINN model\n        model = XPINN(layers1, layers2, mu1, mu2)\n\n        # Setup training\n        model.setup_training(X_ub, ub, X_f1, X_f2, X_i1, u_i1)\n\n        print(\"Starting training...\")\n        max_iter = self.config['training']['max_iter']\n\n        # Training loop\n        start_time = time.time()\n        loss_history = []\n\n        for it in range(max_iter):\n            model.train_step()\n\n            if it % 1000 == 0:\n                loss1, loss2 = model.get_loss()\n                total_loss = loss1 + loss2\n                loss_history.append(total_loss)\n\n                elapsed = time.time() - start_time\n                print(f'Iteration: {it}, Loss1: {loss1:.3e}, Loss2: {loss2:.3e}, Total: {total_loss:.3e}, Time: {elapsed:.2f}s')\n\n        total_time = time.time() - start_time\n        print(f\"Training completed in {total_time:.2f} seconds\")\n\n        # Save model\n        model_save_path = results_dir / \"model\"\n        model_save_path.mkdir(exist_ok=True)\n\n        # Save model weights (in a simple format)\n        model_weights = {\n            'weights1': [w.eval(session=model.sess).tolist() for w in model.weights1],\n            'biases1': [b.eval(session=model.sess).tolist() for b in model.biases1],\n            'A1': [a.eval(session=model.sess) for a in model.A1],\n            'weights2': [w.eval(session=model.sess).tolist() for w in model.weights2],\n            'biases2': [b.eval(session=model.sess).tolist() for b in model.biases2],\n            'A2': [a.eval(session=model.sess) for a in model.A2]\n        }\n\n        with open(model_save_path / \"xpinn_weights.json\", 'w') as f:\n            json.dump(model_weights, f)\n\n        # Save training metrics\n        metrics = {\n            'max_iter': max_iter,\n            'adam_lr': self.config['training']['adam_lr'],\n            'n_f1': self.config['training']['n_f1'],\n            'n_f2': self.config['training']['n_f2'],\n            'n_ub': self.config['training']['n_ub'],\n            'n_i1': self.config['training']['n_i1'],\n            'total_time': total_time,\n            'final_loss1': loss1,\n            'final_loss2': loss2,\n            'final_total_loss': loss1 + loss2,\n            'loss_history': loss_history\n        }\n\n        with open(results_dir / \"training_metrics.json\", 'w') as f:\n            json.dump(metrics, f, indent=2)\n\n        # Generate test predictions\n        print(\"Generating test predictions...\")\n        N_test = 100\n        X_test1 = np.random.rand(N_test, 2) * 2 - 1  # [-1, 1] domain\n        X_test2 = np.random.rand(N_test, 2) * 2 - 1\n\n        u_pred1, u_pred2 = model.predict(X_test1, X_test2)\n\n        # Save predictions\n        test_results = {\n            'X_test1': X_test1.tolist(),\n            'X_test2': X_test2.tolist(),\n            'u_pred1': u_pred1.tolist(),\n            'u_pred2': u_pred2.tolist()\n        }\n\n        with open(results_dir / \"test_predictions.json\", 'w') as f:\n            json.dump(test_results, f, indent=2)\n\n        print(\"PINN training completed!\")\n        print(f\"Results saved to: {results_dir}\")"
    },
    {
      "name": "trainer::PINNTrainer::PINNTrainer",
      "type": "classs",
      "category": "definition",
      "start_line": 14,
      "end_line": 14,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "PINNTrainer"
    },
    {
      "name": "trainer::PINNTrainer::def __init__(self, config_path=None):\n        \"\"\"Initialize the trainer.\"\"\"\n        self.config_path = config_path\n        self.load_config()",
      "type": "functions",
      "category": "definition",
      "start_line": 17,
      "end_line": 20,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "def __init__(self, config_path=None):\n        \"\"\"Initialize the trainer.\"\"\"\n        self.config_path = config_path\n        self.load_config()"
    },
    {
      "name": "trainer::PINNTrainer::def train(self, results_dir):\n        \"\"\"Main training function.\"\"\"\n        print(\"Setting up XPINN model...\")\n\n        # Get configuration\n        layers1 = self.config['xpinn']['layers1']\n        layers2 = self.config['xpinn']['layers2']\n        mu1 = self.config['xpinn']['mu1']\n        mu2 = self.config['xpinn']['mu2']\n\n        # Generate training data\n        X_ub, ub, X_f1, X_f2, X_i1, u_i1 = self.generate_training_data()\n\n        # Create XPINN model\n        model = XPINN(layers1, layers2, mu1, mu2)\n\n        # Setup training\n        model.setup_training(X_ub, ub, X_f1, X_f2, X_i1, u_i1)\n\n        print(\"Starting training...\")\n        max_iter = self.config['training']['max_iter']\n\n        # Training loop\n        start_time = time.time()\n        loss_history = []\n\n        for it in range(max_iter):\n            model.train_step()\n\n            if it % 1000 == 0:\n                loss1, loss2 = model.get_loss()\n                total_loss = loss1 + loss2\n                loss_history.append(total_loss)\n\n                elapsed = time.time() - start_time\n                print(f'Iteration: {it}, Loss1: {loss1:.3e}, Loss2: {loss2:.3e}, Total: {total_loss:.3e}, Time: {elapsed:.2f}s')\n\n        total_time = time.time() - start_time\n        print(f\"Training completed in {total_time:.2f} seconds\")\n\n        # Save model\n        model_save_path = results_dir / \"model\"\n        model_save_path.mkdir(exist_ok=True)\n\n        # Save model weights (in a simple format)\n        model_weights = {\n            'weights1': [w.eval(session=model.sess).tolist() for w in model.weights1],\n            'biases1': [b.eval(session=model.sess).tolist() for b in model.biases1],\n            'A1': [a.eval(session=model.sess) for a in model.A1],\n            'weights2': [w.eval(session=model.sess).tolist() for w in model.weights2],\n            'biases2': [b.eval(session=model.sess).tolist() for b in model.biases2],\n            'A2': [a.eval(session=model.sess) for a in model.A2]\n        }\n\n        with open(model_save_path / \"xpinn_weights.json\", 'w') as f:\n            json.dump(model_weights, f)\n\n        # Save training metrics\n        metrics = {\n            'max_iter': max_iter,\n            'adam_lr': self.config['training']['adam_lr'],\n            'n_f1': self.config['training']['n_f1'],\n            'n_f2': self.config['training']['n_f2'],\n            'n_ub': self.config['training']['n_ub'],\n            'n_i1': self.config['training']['n_i1'],\n            'total_time': total_time,\n            'final_loss1': loss1,\n            'final_loss2': loss2,\n            'final_total_loss': loss1 + loss2,\n            'loss_history': loss_history\n        }\n\n        with open(results_dir / \"training_metrics.json\", 'w') as f:\n            json.dump(metrics, f, indent=2)\n\n        # Generate test predictions\n        print(\"Generating test predictions...\")\n        N_test = 100\n        X_test1 = np.random.rand(N_test, 2) * 2 - 1  # [-1, 1] domain\n        X_test2 = np.random.rand(N_test, 2) * 2 - 1\n\n        u_pred1, u_pred2 = model.predict(X_test1, X_test2)\n\n        # Save predictions\n        test_results = {\n            'X_test1': X_test1.tolist(),\n            'X_test2': X_test2.tolist(),\n            'u_pred1': u_pred1.tolist(),\n            'u_pred2': u_pred2.tolist()\n        }\n\n        with open(results_dir / \"test_predictions.json\", 'w') as f:\n            json.dump(test_results, f, indent=2)\n\n        print(\"PINN training completed!\")\n        print(f\"Results saved to: {results_dir}\")",
      "type": "functions",
      "category": "definition",
      "start_line": 85,
      "end_line": 180,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "def train(self, results_dir):\n        \"\"\"Main training function.\"\"\"\n        print(\"Setting up XPINN model...\")\n\n        # Get configuration\n        layers1 = self.config['xpinn']['layers1']\n        layers2 = self.config['xpinn']['layers2']\n        mu1 = self.config['xpinn']['mu1']\n        mu2 = self.config['xpinn']['mu2']\n\n        # Generate training data\n        X_ub, ub, X_f1, X_f2, X_i1, u_i1 = self.generate_training_data()\n\n        # Create XPINN model\n        model = XPINN(layers1, layers2, mu1, mu2)\n\n        # Setup training\n        model.setup_training(X_ub, ub, X_f1, X_f2, X_i1, u_i1)\n\n        print(\"Starting training...\")\n        max_iter = self.config['training']['max_iter']\n\n        # Training loop\n        start_time = time.time()\n        loss_history = []\n\n        for it in range(max_iter):\n            model.train_step()\n\n            if it % 1000 == 0:\n                loss1, loss2 = model.get_loss()\n                total_loss = loss1 + loss2\n                loss_history.append(total_loss)\n\n                elapsed = time.time() - start_time\n                print(f'Iteration: {it}, Loss1: {loss1:.3e}, Loss2: {loss2:.3e}, Total: {total_loss:.3e}, Time: {elapsed:.2f}s')\n\n        total_time = time.time() - start_time\n        print(f\"Training completed in {total_time:.2f} seconds\")\n\n        # Save model\n        model_save_path = results_dir / \"model\"\n        model_save_path.mkdir(exist_ok=True)\n\n        # Save model weights (in a simple format)\n        model_weights = {\n            'weights1': [w.eval(session=model.sess).tolist() for w in model.weights1],\n            'biases1': [b.eval(session=model.sess).tolist() for b in model.biases1],\n            'A1': [a.eval(session=model.sess) for a in model.A1],\n            'weights2': [w.eval(session=model.sess).tolist() for w in model.weights2],\n            'biases2': [b.eval(session=model.sess).tolist() for b in model.biases2],\n            'A2': [a.eval(session=model.sess) for a in model.A2]\n        }\n\n        with open(model_save_path / \"xpinn_weights.json\", 'w') as f:\n            json.dump(model_weights, f)\n\n        # Save training metrics\n        metrics = {\n            'max_iter': max_iter,\n            'adam_lr': self.config['training']['adam_lr'],\n            'n_f1': self.config['training']['n_f1'],\n            'n_f2': self.config['training']['n_f2'],\n            'n_ub': self.config['training']['n_ub'],\n            'n_i1': self.config['training']['n_i1'],\n            'total_time': total_time,\n            'final_loss1': loss1,\n            'final_loss2': loss2,\n            'final_total_loss': loss1 + loss2,\n            'loss_history': loss_history\n        }\n\n        with open(results_dir / \"training_metrics.json\", 'w') as f:\n            json.dump(metrics, f, indent=2)\n\n        # Generate test predictions\n        print(\"Generating test predictions...\")\n        N_test = 100\n        X_test1 = np.random.rand(N_test, 2) * 2 - 1  # [-1, 1] domain\n        X_test2 = np.random.rand(N_test, 2) * 2 - 1\n\n        u_pred1, u_pred2 = model.predict(X_test1, X_test2)\n\n        # Save predictions\n        test_results = {\n            'X_test1': X_test1.tolist(),\n            'X_test2': X_test2.tolist(),\n            'u_pred1': u_pred1.tolist(),\n            'u_pred2': u_pred2.tolist()\n        }\n\n        with open(results_dir / \"test_predictions.json\", 'w') as f:\n            json.dump(test_results, f, indent=2)\n\n        print(\"PINN training completed!\")\n        print(f\"Results saved to: {results_dir}\")"
    },
    {
      "name": "trainer::PINNTrainer::def generate_training_data(self):\n        \"\"\"Generate training data for XPINN.\"\"\"\n        # Domain bounds\n        lb = np.array([-1.0, -1.0])\n        ub = np.array([1.0, 1.0])\n\n        # Boundary points\n        N_ub = self.config['training']['n_ub']\n        X_ub = lb + (ub - lb) * np.random.rand(N_ub, 2)\n        ub = np.zeros((N_ub, 1))\n\n        # Collocation points for subdomain 1\n        N_f1 = self.config['training']['n_f1']\n        X_f1 = lb + (ub - lb) * np.random.rand(N_f1, 2)\n\n        # Collocation points for subdomain 2\n        N_f2 = self.config['training']['n_f2']\n        X_f2 = lb + (ub - lb) * np.random.rand(N_f2, 2)\n\n        # Interface points\n        N_i1 = self.config['training']['n_i1']\n        X_i1 = np.zeros((N_i1, 2))\n        X_i1[:, 0] = np.random.rand(N_i1)\n        X_i1[:, 1] = 0.0  # Interface at y=0\n\n        # Interface solution (can be zero or some known function)\n        u_i1 = np.zeros((N_i1, 1))\n\n        return X_ub, ub, X_f1, X_f2, X_i1, u_i1",
      "type": "functions",
      "category": "definition",
      "start_line": 55,
      "end_line": 83,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "def generate_training_data(self):\n        \"\"\"Generate training data for XPINN.\"\"\"\n        # Domain bounds\n        lb = np.array([-1.0, -1.0])\n        ub = np.array([1.0, 1.0])\n\n        # Boundary points\n        N_ub = self.config['training']['n_ub']\n        X_ub = lb + (ub - lb) * np.random.rand(N_ub, 2)\n        ub = np.zeros((N_ub, 1))\n\n        # Collocation points for subdomain 1\n        N_f1 = self.config['training']['n_f1']\n        X_f1 = lb + (ub - lb) * np.random.rand(N_f1, 2)\n\n        # Collocation points for subdomain 2\n        N_f2 = self.config['training']['n_f2']\n        X_f2 = lb + (ub - lb) * np.random.rand(N_f2, 2)\n\n        # Interface points\n        N_i1 = self.config['training']['n_i1']\n        X_i1 = np.zeros((N_i1, 2))\n        X_i1[:, 0] = np.random.rand(N_i1)\n        X_i1[:, 1] = 0.0  # Interface at y=0\n\n        # Interface solution (can be zero or some known function)\n        u_i1 = np.zeros((N_i1, 1))\n\n        return X_ub, ub, X_f1, X_f2, X_i1, u_i1"
    },
    {
      "name": "trainer::PINNTrainer::def load_config(self):\n        \"\"\"Load configuration from YAML file.\"\"\"\n        import yaml\n\n        config_file = \"config_pinn.yaml\" if not self.config_path else self.config_path\n        if Path(config_file).exists():\n            with open(config_file, 'r') as f:\n                self.config = yaml.safe_load(f)\n        else:\n            # Default configuration\n            self.config = {\n                'xpinn': {\n                    'layers1': [2, 400, 400, 100, 1],\n                    'layers2': [2, 100, 100, 40, 1],\n                    'mu1': 1,\n                    'mu2': 1,\n                    'scaling_factor': 20,\n                    'multiplier': 20\n                },\n                'training': {\n                    'max_iter': 25000,\n                    'adam_lr': 0.0008,\n                    'n_f1': 1000,\n                    'n_f2': 200,\n                    'n_ub': 500,\n                    'n_i1': 250\n                },\n                'physics': {\n                    'equation': 'poisson',\n                    'domain_decomposition': 'interface'\n                }\n            }",
      "type": "functions",
      "category": "definition",
      "start_line": 22,
      "end_line": 53,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "def load_config(self):\n        \"\"\"Load configuration from YAML file.\"\"\"\n        import yaml\n\n        config_file = \"config_pinn.yaml\" if not self.config_path else self.config_path\n        if Path(config_file).exists():\n            with open(config_file, 'r') as f:\n                self.config = yaml.safe_load(f)\n        else:\n            # Default configuration\n            self.config = {\n                'xpinn': {\n                    'layers1': [2, 400, 400, 100, 1],\n                    'layers2': [2, 100, 100, 40, 1],\n                    'mu1': 1,\n                    'mu2': 1,\n                    'scaling_factor': 20,\n                    'multiplier': 20\n                },\n                'training': {\n                    'max_iter': 25000,\n                    'adam_lr': 0.0008,\n                    'n_f1': 1000,\n                    'n_f2': 200,\n                    'n_ub': 500,\n                    'n_i1': 250\n                },\n                'physics': {\n                    'equation': 'poisson',\n                    'domain_decomposition': 'interface'\n                }\n            }"
    },
    {
      "name": "trainer::PINNTrainer::__init__",
      "type": "functions",
      "category": "definition",
      "start_line": 17,
      "end_line": 17,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "__init__"
    },
    {
      "name": "trainer::PINNTrainer::generate_training_data",
      "type": "functions",
      "category": "definition",
      "start_line": 55,
      "end_line": 55,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "generate_training_data"
    },
    {
      "name": "trainer::PINNTrainer::train",
      "type": "functions",
      "category": "definition",
      "start_line": 85,
      "end_line": 85,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "train"
    },
    {
      "name": "trainer::PINNTrainer::load_config",
      "type": "functions",
      "category": "definition",
      "start_line": 22,
      "end_line": 22,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "load_config"
    }
  ],
  "references": [
    {
      "name": "from pathlib import Path",
      "type": "importss",
      "category": "reference",
      "start_line": 7,
      "end_line": 7,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "from pathlib import Path",
      "calling_entity": "trainer"
    },
    {
      "name": "pathlib",
      "type": "importss",
      "category": "reference",
      "start_line": 7,
      "end_line": 7,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "pathlib",
      "calling_entity": "trainer"
    },
    {
      "name": "import time",
      "type": "imports",
      "category": "reference",
      "start_line": 8,
      "end_line": 8,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "import time",
      "calling_entity": "trainer"
    },
    {
      "name": "import json",
      "type": "imports",
      "category": "reference",
      "start_line": 9,
      "end_line": 9,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "import json",
      "calling_entity": "trainer"
    },
    {
      "name": "import yaml",
      "type": "imports",
      "category": "reference",
      "start_line": 24,
      "end_line": 24,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "import yaml",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "time",
      "type": "imports",
      "category": "reference",
      "start_line": 8,
      "end_line": 8,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "time",
      "calling_entity": "trainer"
    },
    {
      "name": "yaml",
      "type": "imports",
      "category": "reference",
      "start_line": 24,
      "end_line": 24,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "yaml",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "json",
      "type": "imports",
      "category": "reference",
      "start_line": 9,
      "end_line": 9,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "json",
      "calling_entity": "trainer"
    },
    {
      "name": "np.array([-1.0, -1.0])",
      "type": "calls",
      "category": "reference",
      "start_line": 58,
      "end_line": 58,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.array([-1.0, -1.0])",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "np.random.rand(N_f2, 2)",
      "type": "calls",
      "category": "reference",
      "start_line": 72,
      "end_line": 72,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.random.rand(N_f2, 2)",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "XPINN(layers1, layers2, mu1, mu2)",
      "type": "calls",
      "category": "reference",
      "start_line": 99,
      "end_line": 99,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "XPINN(layers1, layers2, mu1, mu2)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "self.generate_training_data()",
      "type": "calls",
      "category": "reference",
      "start_line": 96,
      "end_line": 96,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "self.generate_training_data()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "np.zeros((N_i1, 2))",
      "type": "calls",
      "category": "reference",
      "start_line": 76,
      "end_line": 76,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.zeros((N_i1, 2))",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "time.time()",
      "type": "calls",
      "category": "reference",
      "start_line": 108,
      "end_line": 108,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "time.time()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "model.train_step()",
      "type": "calls",
      "category": "reference",
      "start_line": 112,
      "end_line": 112,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "model.train_step()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "model_save_path.mkdir(exist_ok=True)",
      "type": "calls",
      "category": "reference",
      "start_line": 127,
      "end_line": 127,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "model_save_path.mkdir(exist_ok=True)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "b.eval(session=model.sess).tolist()",
      "type": "calls",
      "category": "reference",
      "start_line": 135,
      "end_line": 135,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "b.eval(session=model.sess).tolist()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "b.eval(session=model.sess)",
      "type": "calls",
      "category": "reference",
      "start_line": 135,
      "end_line": 135,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "b.eval(session=model.sess)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print(\"Generating test predictions...\")",
      "type": "calls",
      "category": "reference",
      "start_line": 161,
      "end_line": 161,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print(\"Generating test predictions...\")",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "open(results_dir / \"training_metrics.json\", 'w')",
      "type": "calls",
      "category": "reference",
      "start_line": 157,
      "end_line": 157,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "open(results_dir / \"training_metrics.json\", 'w')",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "np.random.rand(N_test, 2)",
      "type": "calls",
      "category": "reference",
      "start_line": 164,
      "end_line": 164,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.random.rand(N_test, 2)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "open(results_dir / \"test_predictions.json\", 'w')",
      "type": "calls",
      "category": "reference",
      "start_line": 176,
      "end_line": 176,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "open(results_dir / \"test_predictions.json\", 'w')",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "w.eval(session=model.sess)",
      "type": "calls",
      "category": "reference",
      "start_line": 134,
      "end_line": 134,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "w.eval(session=model.sess)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "self.load_config()",
      "type": "calls",
      "category": "reference",
      "start_line": 20,
      "end_line": 20,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "self.load_config()",
      "calling_entity": "trainer::PINNTrainer::__init__"
    },
    {
      "name": "Path(config_file).exists()",
      "type": "calls",
      "category": "reference",
      "start_line": 27,
      "end_line": 27,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "Path(config_file).exists()",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "Path(config_file)",
      "type": "calls",
      "category": "reference",
      "start_line": 27,
      "end_line": 27,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "Path(config_file)",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "np.random.rand(N_f1, 2)",
      "type": "calls",
      "category": "reference",
      "start_line": 68,
      "end_line": 68,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.random.rand(N_f1, 2)",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "np.zeros((N_i1, 1))",
      "type": "calls",
      "category": "reference",
      "start_line": 81,
      "end_line": 81,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.zeros((N_i1, 1))",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "model.get_loss()",
      "type": "calls",
      "category": "reference",
      "start_line": 115,
      "end_line": 115,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "model.get_loss()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "time.time()",
      "type": "calls",
      "category": "reference",
      "start_line": 119,
      "end_line": 119,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "time.time()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "w.eval(session=model.sess).tolist()",
      "type": "calls",
      "category": "reference",
      "start_line": 131,
      "end_line": 131,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "w.eval(session=model.sess).tolist()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "w.eval(session=model.sess)",
      "type": "calls",
      "category": "reference",
      "start_line": 131,
      "end_line": 131,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "w.eval(session=model.sess)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "w.eval(session=model.sess).tolist()",
      "type": "calls",
      "category": "reference",
      "start_line": 134,
      "end_line": 134,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "w.eval(session=model.sess).tolist()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print(f\"Results saved to: {results_dir}\")",
      "type": "calls",
      "category": "reference",
      "start_line": 180,
      "end_line": 180,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print(f\"Results saved to: {results_dir}\")",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "open(model_save_path / \"xpinn_weights.json\", 'w')",
      "type": "calls",
      "category": "reference",
      "start_line": 139,
      "end_line": 139,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "open(model_save_path / \"xpinn_weights.json\", 'w')",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "X_test2.tolist()",
      "type": "calls",
      "category": "reference",
      "start_line": 171,
      "end_line": 171,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "X_test2.tolist()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "open(config_file, 'r')",
      "type": "calls",
      "category": "reference",
      "start_line": 28,
      "end_line": 28,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "open(config_file, 'r')",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "np.array([1.0, 1.0])",
      "type": "calls",
      "category": "reference",
      "start_line": 59,
      "end_line": 59,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.array([1.0, 1.0])",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "np.zeros((N_ub, 1))",
      "type": "calls",
      "category": "reference",
      "start_line": 64,
      "end_line": 64,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.zeros((N_ub, 1))",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "np.random.rand(N_i1)",
      "type": "calls",
      "category": "reference",
      "start_line": 77,
      "end_line": 77,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.random.rand(N_i1)",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "print(\"Setting up XPINN model...\")",
      "type": "calls",
      "category": "reference",
      "start_line": 87,
      "end_line": 87,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print(\"Setting up XPINN model...\")",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "range(max_iter)",
      "type": "calls",
      "category": "reference",
      "start_line": 111,
      "end_line": 111,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "range(max_iter)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "loss_history.append(total_loss)",
      "type": "calls",
      "category": "reference",
      "start_line": 117,
      "end_line": 117,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "loss_history.append(total_loss)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "time.time()",
      "type": "calls",
      "category": "reference",
      "start_line": 122,
      "end_line": 122,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "time.time()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "b.eval(session=model.sess).tolist()",
      "type": "calls",
      "category": "reference",
      "start_line": 132,
      "end_line": 132,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "b.eval(session=model.sess).tolist()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "b.eval(session=model.sess)",
      "type": "calls",
      "category": "reference",
      "start_line": 132,
      "end_line": 132,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "b.eval(session=model.sess)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "X_test1.tolist()",
      "type": "calls",
      "category": "reference",
      "start_line": 170,
      "end_line": 170,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "X_test1.tolist()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "u_pred2.tolist()",
      "type": "calls",
      "category": "reference",
      "start_line": 173,
      "end_line": 173,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "u_pred2.tolist()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "model.predict(X_test1, X_test2)",
      "type": "calls",
      "category": "reference",
      "start_line": 166,
      "end_line": 166,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "model.predict(X_test1, X_test2)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "yaml.safe_load(f)",
      "type": "calls",
      "category": "reference",
      "start_line": 29,
      "end_line": 29,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "yaml.safe_load(f)",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "np.random.rand(N_ub, 2)",
      "type": "calls",
      "category": "reference",
      "start_line": 63,
      "end_line": 63,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.random.rand(N_ub, 2)",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "model.setup_training(X_ub, ub, X_f1, X_f2, X_i1, u_i1)",
      "type": "calls",
      "category": "reference",
      "start_line": 102,
      "end_line": 102,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "model.setup_training(X_ub, ub, X_f1, X_f2, X_i1, u_i1)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print(\"Starting training...\")",
      "type": "calls",
      "category": "reference",
      "start_line": 104,
      "end_line": 104,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print(\"Starting training...\")",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print(f'Iteration: {it}, Loss1: {loss1:.3e}, Loss2: {loss2:.3e}, Total: {total_loss:.3e}, Time: {elapsed:.2f}s')",
      "type": "calls",
      "category": "reference",
      "start_line": 120,
      "end_line": 120,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print(f'Iteration: {it}, Loss1: {loss1:.3e}, Loss2: {loss2:.3e}, Total: {total_loss:.3e}, Time: {elapsed:.2f}s')",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print(f\"Training completed in {total_time:.2f} seconds\")",
      "type": "calls",
      "category": "reference",
      "start_line": 123,
      "end_line": 123,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print(f\"Training completed in {total_time:.2f} seconds\")",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "a.eval(session=model.sess)",
      "type": "calls",
      "category": "reference",
      "start_line": 136,
      "end_line": 136,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "a.eval(session=model.sess)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "json.dump(model_weights, f)",
      "type": "calls",
      "category": "reference",
      "start_line": 140,
      "end_line": 140,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "json.dump(model_weights, f)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "np.random.rand(N_test, 2)",
      "type": "calls",
      "category": "reference",
      "start_line": 163,
      "end_line": 163,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "np.random.rand(N_test, 2)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "u_pred1.tolist()",
      "type": "calls",
      "category": "reference",
      "start_line": 172,
      "end_line": 172,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "u_pred1.tolist()",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "json.dump(test_results, f, indent=2)",
      "type": "calls",
      "category": "reference",
      "start_line": 177,
      "end_line": 177,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "json.dump(test_results, f, indent=2)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print(\"PINN training completed!\")",
      "type": "calls",
      "category": "reference",
      "start_line": 179,
      "end_line": 179,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print(\"PINN training completed!\")",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "a.eval(session=model.sess)",
      "type": "calls",
      "category": "reference",
      "start_line": 133,
      "end_line": 133,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "a.eval(session=model.sess)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "json.dump(metrics, f, indent=2)",
      "type": "calls",
      "category": "reference",
      "start_line": 158,
      "end_line": 158,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "json.dump(metrics, f, indent=2)",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "Path",
      "type": "calls",
      "category": "reference",
      "start_line": 27,
      "end_line": 27,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "Path",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "rand",
      "type": "calls",
      "category": "reference",
      "start_line": 68,
      "end_line": 68,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "rand",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "rand",
      "type": "calls",
      "category": "reference",
      "start_line": 77,
      "end_line": 77,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "rand",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "print",
      "type": "calls",
      "category": "reference",
      "start_line": 87,
      "end_line": 87,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print",
      "type": "calls",
      "category": "reference",
      "start_line": 123,
      "end_line": 123,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "mkdir",
      "type": "calls",
      "category": "reference",
      "start_line": 127,
      "end_line": 127,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "mkdir",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "tolist",
      "type": "calls",
      "category": "reference",
      "start_line": 131,
      "end_line": 131,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "tolist",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "eval",
      "type": "calls",
      "category": "reference",
      "start_line": 133,
      "end_line": 133,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "eval",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "open",
      "type": "calls",
      "category": "reference",
      "start_line": 157,
      "end_line": 157,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "open",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "safe_load",
      "type": "calls",
      "category": "reference",
      "start_line": 29,
      "end_line": 29,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "safe_load",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "eval",
      "type": "calls",
      "category": "reference",
      "start_line": 134,
      "end_line": 134,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "eval",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "tolist",
      "type": "calls",
      "category": "reference",
      "start_line": 171,
      "end_line": 171,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "tolist",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "dump",
      "type": "calls",
      "category": "reference",
      "start_line": 177,
      "end_line": 177,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "dump",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "generate_training_data",
      "type": "calls",
      "category": "reference",
      "start_line": 96,
      "end_line": 96,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "generate_training_data",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "XPINN",
      "type": "calls",
      "category": "reference",
      "start_line": 99,
      "end_line": 99,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "XPINN",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "get_loss",
      "type": "calls",
      "category": "reference",
      "start_line": 115,
      "end_line": 115,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "get_loss",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print",
      "type": "calls",
      "category": "reference",
      "start_line": 120,
      "end_line": 120,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "eval",
      "type": "calls",
      "category": "reference",
      "start_line": 132,
      "end_line": 132,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "eval",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "open",
      "type": "calls",
      "category": "reference",
      "start_line": 139,
      "end_line": 139,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "open",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "dump",
      "type": "calls",
      "category": "reference",
      "start_line": 158,
      "end_line": 158,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "dump",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "tolist",
      "type": "calls",
      "category": "reference",
      "start_line": 170,
      "end_line": 170,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "tolist",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print",
      "type": "calls",
      "category": "reference",
      "start_line": 180,
      "end_line": 180,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "array",
      "type": "calls",
      "category": "reference",
      "start_line": 59,
      "end_line": 59,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "array",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "rand",
      "type": "calls",
      "category": "reference",
      "start_line": 72,
      "end_line": 72,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "rand",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "time",
      "type": "calls",
      "category": "reference",
      "start_line": 108,
      "end_line": 108,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "time",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "tolist",
      "type": "calls",
      "category": "reference",
      "start_line": 135,
      "end_line": 135,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "tolist",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "tolist",
      "type": "calls",
      "category": "reference",
      "start_line": 173,
      "end_line": 173,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "tolist",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "setup_training",
      "type": "calls",
      "category": "reference",
      "start_line": 102,
      "end_line": 102,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "setup_training",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "range",
      "type": "calls",
      "category": "reference",
      "start_line": 111,
      "end_line": 111,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "range",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "train_step",
      "type": "calls",
      "category": "reference",
      "start_line": 112,
      "end_line": 112,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "train_step",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "time",
      "type": "calls",
      "category": "reference",
      "start_line": 119,
      "end_line": 119,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "time",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "time",
      "type": "calls",
      "category": "reference",
      "start_line": 122,
      "end_line": 122,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "time",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "eval",
      "type": "calls",
      "category": "reference",
      "start_line": 131,
      "end_line": 131,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "eval",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "rand",
      "type": "calls",
      "category": "reference",
      "start_line": 163,
      "end_line": 163,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "rand",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "tolist",
      "type": "calls",
      "category": "reference",
      "start_line": 172,
      "end_line": 172,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "tolist",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "load_config",
      "type": "calls",
      "category": "reference",
      "start_line": 20,
      "end_line": 20,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "load_config",
      "calling_entity": "trainer::PINNTrainer::__init__"
    },
    {
      "name": "exists",
      "type": "calls",
      "category": "reference",
      "start_line": 27,
      "end_line": 27,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "exists",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "rand",
      "type": "calls",
      "category": "reference",
      "start_line": 63,
      "end_line": 63,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "rand",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "zeros",
      "type": "calls",
      "category": "reference",
      "start_line": 81,
      "end_line": 81,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "zeros",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "tolist",
      "type": "calls",
      "category": "reference",
      "start_line": 134,
      "end_line": 134,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "tolist",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "eval",
      "type": "calls",
      "category": "reference",
      "start_line": 136,
      "end_line": 136,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "eval",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "dump",
      "type": "calls",
      "category": "reference",
      "start_line": 140,
      "end_line": 140,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "dump",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "rand",
      "type": "calls",
      "category": "reference",
      "start_line": 164,
      "end_line": 164,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "rand",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "open",
      "type": "calls",
      "category": "reference",
      "start_line": 28,
      "end_line": 28,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "open",
      "calling_entity": "trainer::PINNTrainer::load_config"
    },
    {
      "name": "array",
      "type": "calls",
      "category": "reference",
      "start_line": 58,
      "end_line": 58,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "array",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "zeros",
      "type": "calls",
      "category": "reference",
      "start_line": 64,
      "end_line": 64,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "zeros",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "print",
      "type": "calls",
      "category": "reference",
      "start_line": 104,
      "end_line": 104,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "append",
      "type": "calls",
      "category": "reference",
      "start_line": 117,
      "end_line": 117,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "append",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "tolist",
      "type": "calls",
      "category": "reference",
      "start_line": 132,
      "end_line": 132,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "tolist",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print",
      "type": "calls",
      "category": "reference",
      "start_line": 161,
      "end_line": 161,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "predict",
      "type": "calls",
      "category": "reference",
      "start_line": 166,
      "end_line": 166,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "predict",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "open",
      "type": "calls",
      "category": "reference",
      "start_line": 176,
      "end_line": 176,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "open",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "print",
      "type": "calls",
      "category": "reference",
      "start_line": 179,
      "end_line": 179,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "print",
      "calling_entity": "trainer::PINNTrainer::train"
    },
    {
      "name": "zeros",
      "type": "calls",
      "category": "reference",
      "start_line": 76,
      "end_line": 76,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "zeros",
      "calling_entity": "trainer::PINNTrainer::generate_training_data"
    },
    {
      "name": "eval",
      "type": "calls",
      "category": "reference",
      "start_line": 135,
      "end_line": 135,
      "file_path": "C:\\Users\\MK\\code\\thesis\\thesis_code\\Chp2_FieldDistribution\\magnetic_field_predictor\\src\\physics_informed\\trainer.py",
      "code": "eval",
      "calling_entity": "trainer::PINNTrainer::train"
    }
  ]
}