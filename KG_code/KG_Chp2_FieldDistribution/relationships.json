[
  {
    "src_id": "main::main",
    "tgt_id": "main::run_deep_learning",
    "description": "The main function (main::main) directly invokes the run_deep_learning function (main::run_deep_learning). The call occurs at line 86 of main.py (file path provided), indicating main triggers the deep-learning routine by calling run_deep_learning by name.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "main"
  },
  {
    "src_id": "main::main",
    "tgt_id": "main::run_physics_informed",
    "description": "Direct call: the main::main function invokes main::run_physics_informed (a direct function call at line 88 of main.py). This indicates main delegates work to or triggers the run_physics_informed routine during program execution.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "main"
  },
  {
    "src_id": "main",
    "tgt_id": "main::main",
    "description": "The top-level module 'main' invokes the function 'main' defined in the same module (main::main) at line 97 of main.py — likely the script’s entry-point call (e.g., if __name__ == '__main__': main()).",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "main"
  },
  {
    "src_id": "trainer::DLTrainer::__init__",
    "tgt_id": "trainer::DLTrainer::load_config",
    "description": "The DLTrainer constructor (__init__) invokes the instance method load_config to load or initialize the trainer's configuration during object construction (i.e., __init__ calls load_config).",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/deep_learning/trainer"
  },
  {
    "src_id": "trainer::DLTrainer::my_training",
    "tgt_id": "trainer::DLTrainer::data_feed",
    "description": "The my_training method of trainer::DLTrainer invokes data_feed (a member of the same DLTrainer class) to obtain the training data/feed (call performed at line 134 of trainer.py). This is a direct call from the training routine to the data provider/generator.",
    "keywords": "calls",
    "weight": 0.98,
    "source_id": "src/deep_learning/trainer"
  },
  {
    "src_id": "trainer::DLTrainer::train",
    "tgt_id": "trainer::DLTrainer::my_training",
    "description": "In the DLTrainer class, the method train invokes the method my_training (an internal/instance method) at line 158 of trainer.py. This denotes a direct call from trainer::DLTrainer::train to trainer::DLTrainer::my_training within the same class/file.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/deep_learning/trainer"
  },
  {
    "src_id": "trainer::DLTrainer::my_training",
    "tgt_id": "trainer::DLTrainer::get_B_stats",
    "description": "Direct call: trainer::DLTrainer::my_training invokes the internal method trainer::DLTrainer::get_B_stats (call at line 119 in trainer.py) to retrieve/compute B-related statistics needed during the training routine. This is an intra-class method call used by the training procedure.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/deep_learning/trainer"
  },
  {
    "src_id": "trainer::DLTrainer::data_feed",
    "tgt_id": "trainer::DLTrainer::generate_geom_array",
    "description": "Intra-class call: the DLTrainer::data_feed method invokes DLTrainer::generate_geom_array (at/around line 96) to obtain or compute the geometry array as part of the data feeding/preprocessing workflow.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/deep_learning/trainer"
  },
  {
    "src_id": "trainer::PINNTrainer::__init__",
    "tgt_id": "trainer::PINNTrainer::load_config",
    "description": "Direct call from PINNTrainer.__init__ to PINNTrainer.load_config: the class constructor invokes load_config during object instantiation to load and apply configuration/settings (e.g., hyperparameters, file paths, and other initialization parameters) so the trainer’s internal state is initialized before further setup.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/physics_informed/trainer"
  },
  {
    "src_id": "trainer::PINNTrainer::train",
    "tgt_id": "trainer::PINNTrainer::generate_training_data",
    "description": "The PINNTrainer::train method calls its own generate_training_data method to produce the training dataset required by the training procedure. In other words, train invokes generate_training_data to prepare collocation points, boundary/initial condition samples and any labeled examples or inputs/targets that the training loop will use. This is an internal helper call within the PINNTrainer class to generate data before or during model training.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/physics_informed/trainer"
  },
  {
    "src_id": "xpinn_model::XPINN::setup_training",
    "tgt_id": "xpinn_model::XPINN::net_f",
    "description": "The setup_training method invokes the XPINN::net_f member (called at line 178) to obtain the network’s f-output (e.g., model predictions or PDE residuals) as part of configuring the training process (loss construction, gradients, or data flow). In other words, setup_training calls net_f to compute values needed when setting up training.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::net_f",
    "tgt_id": "xpinn_model::XPINN::net_u1",
    "description": "Within the XPINN class, the method/function xpinn_model::XPINN::net_f invokes the member/identifier xpinn_model::XPINN::net_u1 (i.e., net_f calls net_u1). This indicates net_f depends on or uses the net_u1 subnetwork (likely to obtain u1 predictions or to incorporate u1 in physics loss computations). The call is recorded at line 81 of xpinn_model.py.",
    "keywords": "calls",
    "weight": 0.9,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::net_f",
    "tgt_id": "xpinn_model::XPINN::net_u2",
    "description": "The member/function xpinn_model::XPINN::net_f makes a direct call/reference to xpinn_model::XPINN::net_u2 (identifier 'net_u2') at line 99 of xpinn_model.py. This indicates net_f depends on or invokes net_u2 (another network/component) during its execution.",
    "keywords": "calls",
    "weight": 0.9,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::setup_training",
    "tgt_id": "xpinn_model::XPINN::net_u1",
    "description": "The setup_training method of the XPINN class directly calls/uses the instance member 'net_u1' (the u1 network) at line 173. This indicates setup_training accesses or invokes the net_u1 model component as part of preparing or configuring the training process.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::net_u2",
    "tgt_id": "xpinn_model::XPINN::neural_net_tanh",
    "description": "The method xpinn_model::XPINN::net_u2 directly calls or invokes the neural_net_tanh entity (defined at line 75 in xpinn_model.py). In other words, net_u2 uses the neural_net_tanh network/constructor/function to build or evaluate the u2 neural network component.",
    "keywords": "calls",
    "weight": 0.9,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::__init__",
    "tgt_id": "xpinn_model::XPINN::initialize_NN",
    "description": "The XPINN class constructor (__init__) invokes the initialize_NN method during object construction to set up and configure the model's neural network components (e.g., building the network architecture, initializing weights and related NN parameters) required for the XPINN instance.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::initialize_NN",
    "tgt_id": "xpinn_model::XPINN::xavier_init",
    "description": "The initialize_NN method in the XPINN class calls the xavier_init routine to perform Xavier (Glorot) weight initialization for the neural network parameters. The call is made from XPINN::initialize_NN (referenced at line 38).",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::net_f",
    "tgt_id": "xpinn_model::XPINN::net_u1",
    "description": "Within the XPINN class (xpinn_model::XPINN), the method net_f calls/uses the network/function net_u1 at line 107 of xpinn_model.py. net_f invokes net_u1 to obtain u1 network outputs (likely as part of computing physics residuals), so this is an internal method/function call from net_f to net_u1.",
    "keywords": "calls",
    "weight": 0.9,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::setup_training",
    "tgt_id": "xpinn_model::XPINN::net_u2",
    "description": "The setup_training method calls (accesses/invokes) the net_u2 component of the XPINN instance. In other words, during training setup the method references and uses net_u2 (presumably a neural-network submodule or callable) as part of configuring the training process (e.g., computing outputs, registering parameters, or creating optimizers).",
    "keywords": "calls",
    "weight": 0.9,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::net_f",
    "tgt_id": "xpinn_model::XPINN::net_u2",
    "description": "Within the XPINN class, the method/function net_f invokes the class member net_u2 (call at line 125). This indicates net_f relies on net_u2 to obtain the u2 network’s output (e.g., to evaluate u2 predictions or intermediate values) as part of computing the physics-informed quantity/residual handled by net_f. The call is an internal, intra-class dependency from net_f to net_u2.",
    "keywords": "calls",
    "weight": 0.85,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::__init__",
    "tgt_id": "xpinn_model::XPINN::initialize_NN",
    "description": "The XPINN class constructor (__init__) directly calls its own initialize_NN method (at line 24) to set up/configure the neural network components during object initialization.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/physics_informed/xpinn_model"
  },
  {
    "src_id": "xpinn_model::XPINN::net_u1",
    "tgt_id": "xpinn_model::XPINN::neural_net_tanh",
    "description": "The method xpinn_model::XPINN::net_u1 invokes the function/definition xpinn_model::XPINN::neural_net_tanh (a call to build/use a neural network with tanh activations) located at line 70 of xpinn_model.py.",
    "keywords": "calls",
    "weight": 0.95,
    "source_id": "src/physics_informed/xpinn_model"
  }
]