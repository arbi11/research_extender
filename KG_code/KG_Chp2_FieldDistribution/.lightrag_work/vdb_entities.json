{"embedding_dim": 768, "data": [{"__id__": "ent-96d248a21c032b6d026907fba3b3ce44", "__created_at__": 1759092201, "content": "main::run_deep_learning\nFunction run_deep_learning(results_dir) executes the project’s Deep Learning training workflow. It prints a start message, imports DLTrainer from src.deep_learning.trainer, creates a DLTrainer instance, calls its train(results_dir) method to run training (and save outputs to the provided directory), and then prints completion and results-location messages. The function’s side effects are console output and whatever DLTrainer.train performs (model training and saving results to results_dir).", "entity_name": "main::run_deep_learning", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0otXVGUCAHBP2DrACXVgeA4z99757r3ffYxmlmYcj60GPjBND76QUsrc0xo+TojaQctclF1SoFCZEWbu6/vm++7cwTghbq6m9ji72uOkbuFa1DEttjQDjMEicff3N/ye7LDNj5kRMIxOwK+IIfQJXU5Nm8O+rO6k5wNl0kFJlKvw7rzP5A3oKSvkTec5+Sk+mJ1BRNOdG5H51C/076Ua8QK80tbDOHhL4nNlJj0PdqOsBHJuRn4mN6zx4hd6gT8FPmS7jHT/koJX4yrNp2/aH/Df6akQFG6W7hegVDTlc5AXEOz/UM+Dj0w6RWr5IbtGOGrdEpdZLeTs5CL2MDpH1ym39KXOEKOST3197VnxyQWaM09FWn/BYnE4uFI5boXRj+4Pkc+8xEfpvsBOMqJlJI5Dj+ERj9Ck8SjKzJ+KPjEui7pqgCRO0hoSVuoTB8B7Yr01G2zkd3LZRypAka47r+NK+F1sizo2XmwGzW2wQapSTgYvMqvwO9xh3SvuifSQNEfEB4SS4Cbxz+qTOMwvr/8m8HD7BVShpyYqjKQwG8xHBCcERJ9W94N+poymiOVgv1xuT6D/Np6wHMlFvQaUoDyRzLI9+Jp3V7zXEp05ZCEtI39CP+I273ibs1aisL9TXiCe0/+lcspVthP7m6g4mn9eqzXqUAeuxlvMrfRdOMH8Ut5DdpBxYBf7R+ktMR2ORQ22V3mBX0YmCBExOfEn3wCzAgH2qpmV+bvZx9+Ab0u3jDrcxg3xdagU3Be4LVfyHeaX3uliredvLSU4IzBVLCbFOEXoxK8G6qUUqUKoxn77MVIaOEBn0A24VftB2qbE8DvMP2MntJmRY/xhqcN+257bPovxBXehrdID0geCV7hstYJ+vysyWeLUs8gXKmMvi8vAAnhdShh/6EjVj5DqjgxYZ00QGSXVG8T1zJrwdPXTmCLkB8bZ27lRfAW45bnocfE4YLhNKM1/nb8b6oM/x7/1WWAJTMPv4uxEnryzfViojX7ifM3eEc5xtu4K/53rloaEk3yAH9R18lJ7lJTwmWRltO7/80/B0ck3dE8wJ7rX+kEOFcbJcOxbrRdkt6/Tf2Xq9Y3xNmkg0IOeiWtcqrTE7xYPaZXkdGQGf5b6Nff+f+Qc1dzYRTLla2CY+0mIZvfL25pKocwE8Ee5M5kaeR3bFWuMZVsJYbG/E7VCk6/TV6D3hUOAWEWZA96lnqByt3UVGLF2RBi9kV9BQ6EuvgusTbxiJqnz+kPOa4hoXZFpgo/OA9d1lrlJbFiE+ppP4xNWBtPIHw0Z3ADC0XJnkA3wbmWjcA3VKY8xo6hEeuLgYHQ8ynXcwXSlPzLM7xHXcy5wPxkXHWSmZemNW/fOAb2wJ1YccDQP/K++2npOjjMd+afYxa15qu20xHpyRnCtp5J26+8VWrCLnSucAZUY802ohP8LruJekJPWbCkTvBmbFFzEr/ctZdbKMdNbOA0GGNKab98zkvptMINeJdPINrmlQMQGm6Yb+ovqcrWJr8K/mXvYOegXfrj9WWEM8Pkr2EJxt7lhTBNT6dueWwhmSdHgL3YjTNHW267E7fClwktqOmiWCuTntTV8t12FpwNLv0sb7K1ir5VHT5kR9Z48jLvNv+a8AR7xQzwY6xTvk9Osmkn+2M3Q1MhJ4eW3XmQW0SH+ItOrPqic9qfHL9m/E6//Dj8kUHW6LBh5WhZspoPQ1Tbf2mTdfIOJr0p4EkGy1NehVtOG3OfZldaz9prmcru4afnhZGS1sxZPgcT8Jq+BXwhHrC3Qha8wC7wD6lh5IOtRIVv/GO7TjsV1pGnNk+75y3CWcye+Nr8b36OlaL64gwJ0Pe2MfZEpY1t8i9q70BRmu+W2j3MmGWVmS69w6VnzQm4vQuWxzeiMeMb20LBwaOI1UBJfzVXbzcp2nw9nOznEd6Rb2xedpWyON4MLtIKWOiVUlsaAzeJt0hpeEf9MOFYgW3vBIvI/i7mh8g=="}, {"__id__": "ent-edba7026ce38c9224307734f7c3cdd16", "__created_at__": 1759092201, "content": "main::main\nCommand-line entry point that parses a required --method argument ('dl' or 'pinn'), prepares a timestamped results directory (results/YYYY_MonDD_HHMM_METHOD), configures logging to both a training.log file in that directory and the console, and then dispatches to either run_deep_learning(results_dir) or run_physics_informed(results_dir). It prints the results path, separators, and a completion message when the chosen routine finishes.", "entity_name": "main::main", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQtQFGUAAGBQ0UJFMhHkjnvs7eP/d/fIB6Giw2hYChppDx3Ghq7SNIxU8sGgoqOGiBYZqHjP3b3df/9/d49IQ5qKxFIjHRV1NBHScExMRTNt1LTs+7otyeNSU6hB+DqI4ttcF/+x9Zs61MoXd1kJo84ClxqAR9hTwSRQwy3H9wLrHXne7hGl2gMlES3Uc/gS8Yp8G1wPVrg3uSokiP2xJuGUMd9f6MwwM0kuSjTrucNSd+hkRo9ukPt8HBwTXo8zqT7ypdkTzeJ+YL4331H28ZSjbPQNaaU9hPqsstFZMAl/GrxkdDAD+O/5oVYO6RTS1AQyNPQ8twpd9GRTW/FM1+coy6oK+sIH2EWoTbimJAhreUhSwZL0u3KOuxr0KlD2WUC/Yya5puprmIvKYjN/50yq2N7FfwSPwl7g00uDLfggf1k6qVa5xkV/d4XxRHzWIdStTX9K68D1xkQ0wdv3yfYRrcFmbxNzjSXATn+jldtXoy+E/lrUsJONbik6hb1AV2XGSCdzMGM7eBMQNCtjfiyBJGg9ylw0glSDZdyfwkXwPurE38GvBS8ci2+TJ4F5lEG9p+WYM5gZbB+7AxXqm1wXd65RE608pVqmtWPym/WlDB++yW3RMX/OMXz3/eA12vQicBpvUOgU6tl/cLvaH/1kz+dW7no9GgF+rSJzEHlH2cvGg3LoZatgmbIS1fFn+HQkaL9kzPVUc42uFqYUPNDfYwePHCXW03f4iDEt+iF0ywek+3AzYECXZuotwbDrR7pMKxYNpR6mGQNwkhBv2rhKegp3KG2+0qX3M49w+dritMdco7UCDuLe3+MEteFuckU7IbB4HSkh5exjz2DxD3mpeBgeDbL8cTpEN9cdo4vBXXGibGcr+RpxozAJTAps4Xx6r3Is/JxlgRfIjkAGW5Ludx/3L9l9195PcUYJthu1XLuswFvscFIBloAirU7rkcuZBC4PDlAhuGTbSn/r9rkEK0VEsJ25LK0I55KB4kLYKMvUhdQDXAGs9CxlVuPHDYfMSv0DoQUDcol6wx7PFoMsjYZIj9NbhcHWPNNp1cp/g/1STSiefSp9jrGDGR9oUZoU3cgEX9mHCQnWdOq7ug5HiNB4tWOyMorZhz8w7sHJdBe7DG6yjRSrtebgF/L44DlWIK94FvmbUI1eUr9Yf+JGZhw/kNVRIZomSO5p2Ave5mJqRySbRShFu6w0gX6gBM2h2sBU/Kv1VSjRcJJU/K9x1tFNCugmYwM9Rj4HfNoWt80toAo0flhqtJ3nQHywgfUT0zgoZDJzuGxYZK7lO5l4XE29wYySm6kFaI63WRxj73BOTSkGTnuPej6wQo+L+HAyvSrUbmcirVwOvgTbXIepZub3NDiyHL8UiyknSJxDVW/qmxUqlht6LXlVgIo8smVx0NgAvWrp5nURB8xNrsDZ9CTqWXIbzgPn5JfVv+zVymm2kN/P+ahU6rVYNnmk67vcjZx1nHdKJ1GrehWfwvtEU9gZjcP7tGatN3oSKM7D6mKQj+e6h3jPu0o8DwyvGk8yuL3qMmEdJsFboc3ap2aZMpdmvLluPyiiT8jJ8lWzTZ3MzPA80I9GHXyh8Ux4DEqAM92q1l+x6ovYGr9gZA57EU6AC6SbYK3+LXdE/gZOt+7i2WgGeDqj1dMm5mnOxj1mO73fEbQtEjphA1uKMxFJmWT00aWpP7Mh6hdQayTiccZVx9eOVm6vvpP86H5IjVMofQjZ5v/PU+DZbayhCui3rBEkIkRhnqeBqcFj1QVWpTjTfYgZgMYn2tgbjtWxhWQBrhfr+FZjudWLefot5ZG6lK8VxzILkW/bMrW/usiWCp2kSBttzeMKVM1WEBnocobmCxulIdJUfCz8qvx0LCh8SYj2BE0BEzgZza7LVodzvVKj5CV90sOgRe+wGuhZKAlfwWcCn2ke0wWTwee0NxYnhshsOJ2drJVq7+r/Awhro08="}, {"__id__": "ent-e7609e2b5f354e7d5e1238e95d803d28", "__created_at__": 1759092201, "content": "main::run_physics_informed\nFunction that orchestrates running a Physics-Informed Neural Network (PINN) training pipeline. Given a results_dir path, it prints a start message, lazily imports PINNTrainer from src.physics_informed.trainer, instantiates the trainer, calls trainer.train(results_dir) to perform training (and save results), then prints completion and results directory messages. The function has no return value and relies on the trainer implementation to handle training and saving.", "entity_name": "main::run_physics_informed", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQlUVWUCAGDBcCG0yQFZ3uO+++79773/Xdg0nQiHMYeGk2JqlgtgsUTMECOSUhkOJ2VMU9wCH/DWu9//v+8+0sDKhbLFchcKjeqYdmzRwzTUCS06NM33rYwtMDRuo7QWJUGROgyPiAec3WwblPlytFcp5OfTFRLU59LDcFvy5VCxewW4AWvdHkJBE8YI3SwV818p4axhPk7wWRq3XK2NlYrroiM0iRscT6xKLUmTA98wiyJTzc3CeLTNcz9YzDyE9uG/RYf03OTfAWArQ14+no0ny/Jq2D2BKqse3ch1Zd+FWvVSlNtx3buMvyZ3OjdzMphGebr1pXjdbDMvqK06RGfQIvwGY+Ny+Ghoip8OLhFOZ3Per/UAPmdIB5fqYbzKtxKtQ4djl8FOnM4vNBqMIn6CHSdvM/ViGjzCPRBZgv9rT4NlTjZXzOyyP9FT4WliAMxkv1La0FF8MH07fk06i15WPabEPynupLfzcSY0flW/M66Tx+TV0f12I+omD2cvotbnKJ3lTA5RD18ip+M11Bqn1DzL3dIS5Ep/IqyJXoCz4K6OZtTLHMh8XFiOfHga8XAknDkabA7mihUCJa9XG6x3iB/0BSlX0DG9iPpG36pW64XESXWUGkWWulFkvE1oQHgTjjEJ+FVmQt8dOILTKRjdjRrDywPt+CYsN/PF1fi2e5B8XfyIOyVtZnfpn9unhGrrIP4J2MJEpEBYxd0f7gSDQdPTiLvImdwo15p+Sc7hznFzgoe9F5ks/peu6UYB+xKIz9yhDul/8Y7BYYuznhIeRi2eJMEHk/nJaFD1mQ/Cvn2F4ST6RXQP+zY3sr+Me8xcRcwybgn9wlN6Dr5+oJ9fIT1tFoAxJlM6yvWGbrP9rkIoSjOkG2Y1VcWUeP/J+gRR+H3aJidB1tDJnj38z7harJH+AN/QZ7MZerMY1BJdtbA+GtdVpDxK9/I7FJr9u5jXLinVsAyey7REHCtI9nniiFN6BHicPh7rf2K3pb6L8qHGpvnH1TN6Hf3nzHaQCn3gOFWJu+wN2jBfbDS5MbjcVUNm57b6N3Or0x5Rrohl4W8N0vpI/pmJGOdTypltifnRDd5NYDGabW5VktKmyCT/hD0LjygPEKFoixEgC/Uiax8GeglzCR7nC/iQ+zyM+hOVNUyfUQXzZIrfwT6Pz3c9F/SABqrEpugL2kLrSU8frOXuyD51jqsYfMI0kdvBFOVbJVF/XLuKINjGa/63jL3Gx+gHowKPK2zwidaGlEmolE0z5uFunWJsbcA8bR21jPR7hZTgp8w085C2wXknZQszVexh30VXxTH9fweuMK2y7csPznCGshKklYF2xub20aXaVm9FwjPEZDpV69eiOysBr7wN6jPPsv173vMuY750V7D/IaJWmXTVTjKg95GuJcZlfCIwmXya/JRxMoZgyBole6L1DGmXqceEL6ztwiAYNBfCo2C8Y0AZFZbOzmPnUYvNOZlD0Tokm+vltXIfakMfggl2C3K5M+R4uUVMzpoVmqedCA8LkbYQyA1/HxoXSBVTrwv3ecepjehjMh1MpuuJF7P+bdTBcbMNJ+Km4IoUTXpWvltqkX4y7uIPxe62VqIPXA86JY4IGqzP9EnWRT5f+sz+l3Wb0bkR9yF0wlxLpsN/KEuzfdF+9Tumj3yh51Uzwf89c6Y7wM+VVrBznRnoRyOOaYZrGZT1C7PeVLlTtNeugS1KE5jPL2B32z2Ox17qupbSRHWbX7tdOvQ32r1GN36fzNfvVZ917hBTAWfOJwqEbjgT1XJ1OqNHgpuyqsRJKIO+FIrww9RzjgfdBGNZx0GetS521mY7QnKZ5fLeB1rsrfh5tc1+Db6Car1LvG/hh4j96mb9Nz1ey+7uFLbsrUPt6KLGKq9YwH4fxtBj9BQyTT5JdiKZmNBbpTzjjlIc85uVqUWdPoUQ/4qPuz9Hqc6A3W0Ps7Wghu1Vbsn9+I/sso5r+6eycer/AVMWnoc="}, {"__id__": "ent-fbf7f68e73a7a3a6936711bf3d300c2a", "__created_at__": 1759092201, "content": "main::unknown\nThis is the declaration of a function named run_deep_learning that accepts a single argument results_dir. The provided source snippet contains only the signature (no body or docstring), so its implementation is not available. Based on its name and parameter, it is intended to orchestrate a deep‑learning experiment or pipeline and use results_dir as the filesystem directory where outputs (trained models, logs, metrics, plots, etc.) are written or collected. The exact operations, inputs, and side effects cannot be determined from the available code.", "entity_name": "main::unknown", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQtQVWUCAODV66gkhqIij/s4j//85z8PYlEUH2M5YwiWrq4JKJrW6O6gJUw444NdH6CbBN4SMBvgXu49j/+c/z/n3opMw7YN54YKma9N0iJHRaN1p3V9JKmj1fcNxqtGb/a+J78Y7xS3k4Q8FZW5/8MHDxzlfwDn/cV8snBbhPQLfZ66AGSHcmCxOFdaiY5bLi6J1LET1b+jNnxP2i6nSG8JZUz/xHedx8pNYxi7y1pDv3XfxrrVa72p9xlPohshjbdaHTRZSlj58aLYCZKXvijSqRyKKsgrpksHcl/0nRbfdVs+ePOP2dkZJMkcDO8LjODWKYXUNdPV+XAhLrf/IRvkJXdsy1S94uA5fNj8q91nXQchuw90wAr0gno05YY1IPjo+7Hp8mBsrHCF/sm8FE/xT3YztV7yg1nHjLVngWnGOOaIXB5qI5a1T69QyqmMkgXeP1I8LNXhhZGTehKXilJdFa6zc9EyKrFF5D6cpY6WFmYvBUuNf2aOsHOE/4Sfd/Y4Y4wpZo885ZlP1K/IzNYB7WelTuuMjvPnu39u+15YJJy0m0PbuGp2tnIVdfNBVwGUFxULn45d4IK4xthhbRGDcoN8TZsX2zg5jR4wdzqpOB2sNbE2OeqnCTDfned+bV3mS7ky5l7ogRSRjukee4I4lPwgkE/HRm9bRWSUWksu2TtgvzscrSbDaKqRFCpmHfl19JrVRr9Ge4UKq55FarPZjhZpGe3X2QFNgKH24eJD73NqE3+aPPCJdBKpRmO4KnVrZqF5HCQkHyoxb6NdWf8C1w9+Bo5KHVafNwf+JCxgXw4028R8yJeYNW6uvYSc55NkjtkLH5qb3PZwtdrjm+Z+0X4e3Mpco65unA23wDK1SdiJX8UdKBGZlX1NZuzd+5+WCuTv9aUyIz4lVcZKYQE794Ns8UvyE8oT09Eh7U6kF7UpK7MA/pZ/Ldav18H98hUpzNfAj+Qs8RetETwQ1/v/y7ztNISGJA8ewPmw7/0GMSl6BlzBPbYWKcguBpucZeg4nIbXSWukUWK1t9Ctw5dafgM5zjBYDyr1QcmvvIG7hdK0Ie5DeVL6gFlBV4CgtLB9Q3O391n5iFsJzqAQ/Y4uO0D846Ol4DL9C36qIShdpJ9aM6yetlFgj3Mr1Kj8nw8oDqolSeoxX29gJ2OZnUkelOwbCVrwWjCe7JMe8a3sDVDELnCX0LCcKu+BkjA147S2Gxn6erCJe5JZol+0EL2KsFgPBmPDyXJbhqoTpCMz487LsDgKpCehkkihf7O0B3xnjsGYW9OQp/7CbTdqNE/aHOccqpGKYBdqZAPZvcI39Ec0hTkWSbP8Fqv2yO/oK1AQTm+dbvgCzzCfwTCzAh4Em6MfAw/oFiY4JtsXmakMobvSoeY67ZXWzaiQjI9tMucZnmiQRKN5Rob+lbDd+wd3BF0NXk9fLH+sPRLzUSM+K9nKKbZCeAdcQIZ8XDqzr8orqBvg36yt8aZ4l5ZgRd8csptUqy3MxpYucce4GeZ+pUAuZXPo4fcmsh52qlTFXOUuh0fTVWQvMJgNvI4v2llmrZYLKtU+c5W6C0/Bnc7KtBrfY7nfKBT65TSygIuSX5syQ3cDgnPBXSsWWbx9EieUprR6t4jbZuYJZ/UldD/ZKuXsbTJ35mjmK9QHmoVP4jPMsDlT+NLwS5f4c+KPVlX7Yr3MeNp3V1DVlf7nYl3GlYzlVrtSafJ8CpsQ3yCVsW/iauwRuSZWO5w1AT6Pt9h3zFXWXL7QTtWC4VpwAq4nKdxjGBDyyb8tiySiDLyF4ky8XlJuhJnACXaIHiEdqFxlYBIZFfM4pyLn7G4cA8e0+b422pM2mz5SMtj88H3vHP3zUNS4qfvgTfMoWymf1TNtDIfsU+COmWpMUit10e3nfhYLUHL8rcgGbbwQwh7+MJ3jqyXltiV0wQtCFo3Rbew9d3G8helMnyx10ocw4NyflMu00cfscvZ3tAKZ1w=="}, {"__id__": "ent-8b5c61765869cd68f8165d076963d9ca", "__created_at__": 1759092201, "content": "model::get_model\nget_model(img_size=(400, 400)) builds and returns a Keras CNN that maps a single‑channel image of shape img_size+(1,) to a single‑channel output of the same spatial size. The network begins with an input and BatchNormalization, then a sequence of convolutional blocks (Conv2D -> BatchNormalization -> Dropout(0.5)) with channel sizes [64, 64, 128, 128, 128]. The decoder path uses Conv2DTranspose layers (also followed by BatchNormalization and Dropout where shown) and adds skip/residual connections by elementwise adding each transposed output to an earlier encoder activation (x5, x4, x3, x2, x1). All convolutions use ReLU and padding='same', so spatial resolution is preserved (no pooling/striding). The final layer is a 1x1 Conv2D producing a single output channel with ReLU. The function returns the Keras Model (uncompiled).", "entity_name": "model::get_model", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwNzItTFOcBAPBEBo0NYBU47o5bbu/2+779vr29wxgf4ZTgI8hBEBKF+CjNoBkfqAkaY41NbM34aNX6IAqGA+52j293v91biAmmVattECYoYk0ci5lqieIj0QZLm8k4tjPa/v6A3+cW5x2CU8kD6zxJtH2GS6SwuSTnZWkVOeBfAUaljLwh0qKkJ84HH8JlnhRQjom0V2pDbzpLyJ8Sa/gIyaP/QlHPWZ+YmGyF2R36UmB5crMZ0Oep45Jeexo7a8ha6MAN42thzrFyh9iyMGWflqKVel+BstgozhNGDNnHkd3YnLzYKBX8rMHcEpqZv9OuFNOtIuNu7iHpoDKiVwQLXBH6lfNFvNp7L3eKVJ1L247jNmrgbR2EbGlOa3sRdAYTk78BIcDTTPSK4UB3zDD+wZ6P6qzzzlSjqGFRK29MBRdBaWwdTuU78RV1IrunfEZjJMJqfJnyLa6Yiwgj+Guxq6Vr/0O9muaRSbpLzkvWAFOZIxXhj/23g3VZ9/T62D59UED0af0N5jIr0FWyDo8NLbX2az8FM8kt263NjZbZr4JL2V+gDN1D8w/76UlSoP4Szu/YhL8Fz4TmGm9bXqUG/oe+xIbxz8Co8Gd2im5vnot/nqg2BpXrYJh16s8qza6tabf4quQy9XR8rFzpqzMvw2vo6KGwr2fSbeMpOJ276VirnWRzdKW91m3BesYF9phLQY62G4xjA3CsHIbfMeA/AF5XIlIvme1qaDom9idW/38h9KYyA9wTG/Qm0m+M5C1y9+Y+xBFS1XKOIqsMrgZ+f+/BBe5GYYYjja1gJ0jU/Cc3xvueO+FZ4fnI30xj0vc+d2Ip69emewfpRmUancUJegH+3AnlanUMf43fd+S0+AvVgSbiOnkced+h8A/QM6SMLJZK9Rb/BTYFFML92QFpPi7SKoWq1g47gEP2psAO6UtyRuv2dqP3SbUaVBd77lt9xpnERnQWjeK/0lsuHz6dKrRUiBPwcnEnvena6E93hdozJc7eHPSyKFqgbrBm4IGDv+FPWd36yUTS8xc4lpRzhTBmXrb2KqPYC9cJg9Fo1hOwMDSt6XcoRTkmRuFKbT17i6tomiBHhCuB24GoNMRCrvHBiFlgu/CswFS9Bi0zP+DvmAk4Tm/mPvRPY5dQnz5EBz05QQsOCJ72B2gDNtiQ/6y5VR0grxHk5PSfhN7gduENQZa4jt7V8s1CX632iBabAX8f/Ef8Y2cqHm3daLQrdS0yjVgTyRrx2uH15ipHrnkR1NAwDLM69mU8TLeKV/k/8u/w88QSXVd4vYgrlDIDxYeeoCXGObHHupGzAwJ6vDVTvEusZIZ5QUxL61f69Hrr7/IR2UlrcQl+meSSS4I7GjV8YImxhb/rypd7tF2BhOdI5jft2bgzmOV43twGaxBPRjubfY9Nlfsez7QWetYaV5Uh6ZPYC41PJW2315qCX/e50Qig8VgwTe9nFlyGF8P6wH/xpzrJiyA/FsQm/fc0NRnGXX5D62GcdCa3kqwCw7CRzpRBUPvoB9cYdEatjU8gTvxuzKf+aOWTGp5TR+Ju6wTM8NXHs4xMskrdGd/BmuzG5CI625GNHXCfpzl43ayVj9uW9o69Detqtj4e3qZj2qanlwbLEh+CX+2pzJmhrZNG3M8lUoxHuID2yyVHXjV/7dNgZccaOAFNp01OhcwmX3grkhEyy8oy86SvhC6yHr5nP6tHiIedI6JZIE5qH08umNl2q3k12aM/ULu9a6U9sSpTP/pbsZhNRsWeWvyWtXd3l1KlNSi9YK86AFSh3PiETRTz5CJhe7KP3DCejheCLebfkn9Aj8WT4ijttliHJa9km9gUcRDdiBUaG2LV+n3C+z4AUrzcugIz2Pl4tfm8sjJ4hzxxCclH2o/tMX04ELIv4iXgBHeKr0ALAs3JteyyMiz52CSyPXlQG1I3szK+HPcJz8Fe65BNtAUd6YF/48fiC/ZRdbkJkAvMO3w/tov+D6W1fH4="}, {"__id__": "ent-b9d9b68bd18c198dfb5b7ec13c561dec", "__created_at__": 1759092201, "content": "model::unknown\nA function named get_model that is defined to accept an optional img_size parameter (default (400, 400)). The source excerpt contains only the function signature and no docstring or body in the provided lines, so the exact behavior (what model it builds or returns) cannot be determined from the available implementation. Presumably it is intended to construct and return a deep-learning model configured for the given image size, but this is an inference rather than a statement of the actual code behavior.", "entity_name": "model::unknown", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0ItXFWUCAPCzHYjQFMFLF7mvuTPfzHzfzNx0QTPDWPGBT9BQIUGlzI6CR63NWHc9eFbWdYHMJwL3el8zd76Zbx7XR2nl6fSiXUvTm49k21w3QMNOEZna6rpe2/39Cb9V1gFuG5rndyYnCMe0mUKaW4YXGXVsKyxlvuj+mTbBfXjELOMnPN4ob8EUtQntYU2w0tzD76QrdYMvEm641gnT4WxUz++wroWH9MXiXeVl6qL2NtGSTYR/7E3dq94zutXb3JjDspzyrEOZpNkW9QvMDM+d7kxpvlEOw/APcM6va4z1/i3G+/ZnE9oCR927IqNtR+QVcBM55IGctkDE1WJ+Diw0V99vvOY5JY+X/+au0auN1/U8viV6KfgInCb1BF6CdVoKX/ENW1dQv/mQL9eYjGHyVP6AdZlrGuNQncxTsTj4O7Uf9fnPOVbGMC5M3BceIkvVhWI1KOKbhda4E70W3B5fxZ/RnoKTsZ87a84WviZTRKcw7DkbuBOvj53Xsuy1dAPxm6Kdg3/PtUo/CNHAJJtOtOXfaLtEOvDYUJe9KHjUn8kPqTJuEAeUffwA+JBrtHOBF1wWXXSf7Q7vzqtSx2oeYa4QRSHjjvGlW6GaE3PMikQRVaqNJqq62TgL38Qee5Q+PQhRf/BdfQRaytVRpcFb8GD4JldtciGG/DnqxC/ihvDnwkh9hfQ7ax77F1zJBBJDQjf7Y1e2+x7ISLRGfuHKOSHcyxfCrZAWj+M3qOZYCnbsAXCF749qmE4njoRHyMfBevEelWOFPIuk133r9aSwO7baz5KlcpYUM49Sew9c98hUmrzA9kSnJTrJTu0xUqb/h1sGXwHt1GGm312KZ6Al8UyLod+hVjK0sIIY7HIQ5K+KZjRTd3E/IRyYJh0y1ilR9oHvkFrIP+CaQpnGFHSe/iiZy6XV5WI76KGyo3URHZ2RAopF4rsv2g9nN1HPCw2olM/wDbEXWPrRKqpzzyFxIrvBPoe/4k5xz3nvCalkM+vTXUJF5LRxtasStea1FdaALCGLzBafBJvgLFKh1etV2nE6jW/Fh7mJaAPA/Nq9U4WLOvSUCGfI1IKP9SLjWWkzdVn6wXsXLTSH/Q18jfUkFqMtzELjO+/3ZBTZFe8Dt1VZ9cnFeq1rn9WAavgu+EDI4GuJUxqib4bz/d9al3yr0DC/mtqoqmIATJXakUKq/r+3xrJDU2GdCpQaOYGKGMidVafzB/3j3d8Ec/EdqxP0o07ZG04ltpIBeTx+I+NZZpb5X/5TdqLbQ71KXYte77zrunKwjxQkvpZd0gvcJdBLNlK5eCf3ia9dmgk/4O4jUx2VPADGsUs64pSFo9KIwFU8FxZ6FrOtZBK1ID7ZRmCkpzgWVI4XvAha4MfcFOGXWDZThmiKAen8FIxQN7DDEOVGbbPvpLFYQ+S29SnfQUXjFL5Ff5TogrYCUQk3yBrSV/zTejWbyj/JZvDPcKW4JeeYuIHbpg+ZjfY36i3mSziDjLN/I54AD3tPCPX+C9pl4TNUGZzMbPKvZZ6RbwZqqZeVTzwbrf3xcrfskHAPyYnWRrbZFX6XBPSfkSOZp+ceWoObqfPiP3zb4CR2FvmVFEoWGWUFq8VTRon5kjhDHRxXXPCctEDcQbKciQ4YP3dw0LNF+yt1hFooj5b2xt4x/91RgvYmdxm97KDuYE2ujNkvPB8G7L+MLrkIPQKL+BXO9+wDrC/xhPEofQ1Xwn+C+dwx8rjxltljnzTTwCmH9r2163tHvtEXf8K9HVpKwltPCtXrfFpZgtvROvCdshw0OX6K9crNvAMTPJOfp932/kmAVrad4qukjPzSRHmywi7hv8Bdymk0kisv2GLmOSco84VVSgxspQ/jZSSlOtW1cm14HtzH9ro8mk8dI2fyv0ULrPe50/Ga+CD7o1tihrrXGGOZkFBMZNfT1hx5u1ptVMJGOs196O0w+rWItSxJuBS4wKnmEnUHqVWAUKwfkU8w/wPciZXL"}, {"__id__": "ent-5be7e2b9765dd7404b558629829e7116", "__created_at__": 1759092201, "content": "trainer::DLTrainer\nDLTrainer is a small, self-contained class that prepares data and runs a custom TensorFlow training loop to predict magnetic field maps from simple coil geometry inputs. On initialization it loads configuration from a YAML file (or falls back to a built-in default) containing model, training and data settings. get_B_stats scans a list of CSV data files to compute the minimum and maximum B values. generate_geom_array builds a 400×400 image of a circular coil geometry (a constant-value mask) from domain size, coil radius and current magnitude parameters. data_feed produces training batches by: parsing coil parameters from CSV filenames, reading CSVs (expected columns x,y,B,mat), generating the geometry image, interpolating the measured B values onto a 400×400 grid using scipy.griddata, and returning X (geometry), y (interpolated field) and a scaled y_norm (y*1000). my_training configures the dataset path, obtains B statistics, constructs a model via get_model(img_size=(400,400)), and runs a custom training loop using tf.GradientTape and a Nadam optimizer for the specified epochs and inner iterations. train drives the end-to-end process using config values, calls my_training, saves the trained Keras model to results_dir/model/field_predictor_model.h5, and writes a training_metrics.json file. The implementation has several hard-coded assumptions (400×400 image size, specific data folder and CSV filename format) and depends on external functions/modules (get_model, TensorFlow, pandas, numpy, scipy.griddata).", "entity_name": "trainer::DLTrainer", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQtUFWUCAGAEgSCFhVIvF67M859/HhfU8q0o2uaRxGd6BAM10ZXSFlsLFvbYruGjAkwewY37mHtn/pn/nztAWWYRRWcN1D1UyiIanjxraHrY1lo9pEuX2O/rJrn6FLSS/xT9SiWzPfC6OIQSnLngZ8lnzLfeVEroT9y3qZ0Z9+Wr3HzfIdc9oQtcpS/QW0MP5TUkBO/JPhbBP4uRx2u0WcZMXzTZraxrq/VdNR9F9e377Di8Cl0SnPXteJKYTsqpk+qMQJi8ZFTia+rOpkFAxErrMj0oDYkHslvA/mCp5gjfzFqW/TjuIUXkG+YXUQJPhN4INLjnirtcqagQluOStjX8RMsA7ndE8Fvi2x3D/CJBhWPcHpnJTuVWBLcF4liJeVs4TvIzYHsZ/rvdrh3GzwAHygs2BRLwAe4++5M8Ju+Tk+oT/W4oiymhfK4z6f3QbEiJlf7RoMpskjrICOKV3+N/C/3WX10fhde7O8WcE8uzb5CHDkbrtc9Re+hmXKc3m0toPiteTpz1Kx4WNOoU+NKHE6Kl995ND0YCi7lTuAJlHl/HJdA332jn5qJtYq1QpTSQLDMZOoQ61xV6iI+IjPiY3mXWaUEjKbCxscWMk3JxtPO5cLn5bfoiXEx/QXrhOTibla0FwpASgXmhyZl5qAgWOD9uylUP61XB/XpJYLL437AtbkiLUK2oMXMuu1i5DpKNVPs3bqq2L/SdMg5ziOKZDWY7dsBKixwfxRM8x7Qzd/UI3wgKWy6BFNQnxAp70+6g5Me8Upc0zfhAi6oO0n/BfmOzHGMe1yX+WaGWWdn0JHeUWQY6/AOU21FoF5L19HYyC9SzBQbKcMHf3DlWJ92f+Q/PYvF0GHrmczuUZ+FroctgnF4Ll8hr3B4rIpT44sEO79NgrfKVMRc/gke4YTvFdTdMgFsq439nAmEDf405pBWiYrgl/CJXwIygYamC2x4sBafEZlDbasvPyYViN0PUP2Ze52LJz3QU6oZ+Mwt0ZZbai7Q7whEwI/EFbSXfra7mP4cx8GnVVCdZ27xvSUfxNWzRvTCZq812UmPcBqqDOqKcxSdnfo+HqFeV5tAuWCR8rfaQja5vwAMUY1FWBeihV8jD5kmS4i2YUuM76C2lykId/pV4AVfJn3WXy8v5yWQV18CM6aVCqvUom5vxWnaZ+YT5QCzG0eCOfN7cLB40KrRo4TzXx7zP/SAEhXxmr6qFlsJ3qCrDqy8wDhn/870iV2XE6K+Qj3AbPYA7mV4j3rx1rFed13yQvj/tRuA0j/CV0AiarrezsdK/qKe4F8mbQmbbM8G1Qh8c1L/mk5TPzAf+PUIMF4v/ZJYHc7JyxUvQAYsVma+jy6hz3gsui74V4AUv54ZpNbfF+SBWTDR/4ivAVi4OfgieB1eocVLFnXX2TTuvJnp8QhRbbc6DW/EhaVNAE7zkqJxnLvMnGD00K9VqDk2G99FFUEkVyutRmWtjU9C1kInXWDvHvpE54i0hU3QeBsVy6gw6xyThGuljMQ09ZJ3gIr0QzBF3MFl6nXQGDcFJ0++FqlsW4pf4u+xe5y78pNxtfinJhsseNFehnVP6Ac1dVaPk6XaVkIEWa9+SDClsD5GLsMSah29bSfB55zr/L8FRvMXckLaaGzc+R2f5k+i0vFo6r0eJl8E/ranv1okPeEEfgyvct5hNNmCJ3jCzyPMy36x4tAGrnH+P1Fs18HBTOTVK7xeOWSfaOsOD6m68ZIbtLQYmdVM/w3iMSa191I94lzFkLSc/cBf0RlguvAy2G//h1umbA6+rn0rVSj9uBIz+CFctLgmHySf8GfEIs4UtsF+1v5LG1RSPKKeBGK2IpIrfh2OE7KBvqpKe986c0AnGap3Afa3LxSJpAI3i02o+OoEj3BH8FKwj+XFL2b+xu5lpuF+P9/ZIf8BxxJ9xzDyQvpbvsB7KS3HX4VCYIS1kIZ6A0wVFnkBJcI41lWlu8JMC80f7/2IllKQ="}, {"__id__": "ent-31b5c9caae4bd39488139dc432618b3c", "__created_at__": 1759092201, "content": "trainer::DLTrainer::unknown\nThe requested entity cannot be described because the actual implementation was not provided. The metadata shows a class named DLTrainer declared at line 19 of trainer.py but the code content is marked as \"unknown\" and there is no docstring or parameter information to inspect. I cannot infer reliable behavior from the missing implementation. If you provide the DLTrainer class source (the method and attribute definitions inside trainer.py), I can give a precise, line-level description. (As a note, classes named DLTrainer typically encapsulate deep-learning training logic such as model/optimizer setup, training/validation loops, checkpointing, and metric tracking — but this is only a general guess, not a description of the actual code in your file.)", "entity_name": "trainer::DLTrainer::unknown", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQ1QFdUCAGAZEShxMJUfgXvv7t09Z8/Z3Yum+YeMOpOJoo2KlE2a6DPGIF7mX4Jmf1TiEARqKnB/9t7ds3v23L2aToX2QAnfS8RyUnqZ7xEVGRmaZUmGGvV9a2k7Xw+b1SH7lPIH0uA3CsdUe7n0GsrhOtEl8KOQoy5snOeNV8uFw7Td60Vn5XvNo1xthIX3NBowHwQMr3qf0iN9wO2Kfht20QTfDTYbFjrLHPeRNdrw6wnGl+KTZom1TmqN3jy0WGPeOFtg+XR55kV5PCCg50AuWcgvkUKT07XuyK2oZV+Z3Con0wLjZHgS9wKsQHL4Fi3CvFlEvh7J4ZWk0i42z9Np0gJSbpWAT2k3PmZU4e/wx/JF32rY579mybyHFoAqp4grtfvtgsOjZNXZiS7oF+0vwAkjGh6AE1CLRIFKe+0yekbpm9g1sQZspcf5eSDRfUD6gvyPq0GjzCpPr1MJ+8yn0WlTQ0m+BsGR74rbrPdJASsQj9Pc4KOszMrCg/IAzPFR43mkeI6iOdygsQnUmy+bbXwquGakcfEoJ+KTB0Cm8FCswVvBrwIBmhobgiv0h3iXUdzMKZ9LXOZ1zRXu5RrN9zI2R/7DbQn+LJwmH5nvaK06pOcpF/gEj7aOWh1gibKRL2ABLgR2NJ2m3xoRyx3ZRweNmhA6tN0pwiOcYbGaFBrT5A1yC6jIqiVXxRrtbb0Fr4KQ/o7WZZ/1bANf6VHysznEK+h5tM25YeUY/Qf2ZaNwMxiAx8IoWjM2V+3zLqNf8jnuEjSX3dFvqDH9iJAlzVTu+INaAjlD0uAL1vrXhIatJgNjDqZrp+F7XIb1l+u8+ph/XPQguGS04QVyRvgl6fH0ATyI//LUkWkIP5CQE/L5bI2fyc2ubQlvlbvk3ZFeFodDgQlOqXdIz5YfDMbh/RO7jUppMypwFxpJTYtja+QU3sflifVCjx1D+Wipnkipsjy4Vvwt0sl1Z8S5XhbbcAnjwUYjTR3wztIfrk9V1fAf3G1hhpgSPSY+vqcTLPHcYyujif56cZL5sJjk/RovBq0Kca2VOyP/EDfIF/xx+mazRL+C2xszlAekX8RUOh3OV/qNvfQk0RRE8vBNbQQb1rFrEcvSp4TStRnkEPseP6rcVS1ULZWY11CGp4KukHzkJXBWmaTcDPWmrVHX+qvAFTTemYNPmLK1t2kLrjbH7QX+MixCRSw1sLR7nI3WmXXsX2wytNJSjKuu4fhakmEWOUcCK8ho8hsqsH/C6a5FmZzVYb6Itlh1kTq7E9WiNmOa16Z5dIqzQzonbJKS+RGBIXzK1tkrcLqxKHLK6nj71Umlci5p9gzytlyqp0gLPPNAnjjY1PvWTu4HV7LaAK82PwI3Befqhe7nLB9MQi96DsrlTp69ES2jx0GFMxz5Z3w6W+25LVwPz7L7xc8iv0rb7an+HWjW3nX4fljOusQyfAkysA9W609grFwjAXNGbCK9zbKlJ4L59h3znPsyqEA2fyHE0xvoT/WccZMmyb+S1WiD+ql3qpSlTiZe/3VtDC6GXtNkVe6RxpvxxeocO1M9xxj7vzU3uItWKyPk3v3PqK3GRpQV+/c77Ww3fNcejs6R5+t2OIF1IK/8pjlFPOKpwDMP/Jd20KUw1/+s2eD7wUqxf0IJaLmzihWHATo83iPFoStItpPpfeyVwCDPqYbvsPlULDV00GoxdqI3xB5OlRYqic7KWLezy04P79dqxybziWRFyrP2d6TL65Gs6C2tjHwkzve5yVSjHWXDPlrJtQdCelOwE9cEi6kcvioslNZLO6Ofs0LYBdbLPbwZu2yfkW3yC5PNXK5SvMtM/Z51FF6mcf7pxiy6XVgU8unPGM+ZrfBdZXTdx8mb6IcJZwK6HYu+wY0kI8UFY+8HtnCJTg/W0h3KmFg+mt00j3iyTljRxpNiiRkMfMXSzG6Hc9YjAQ66y1m5mOk0iB8KmTTJ6Nf+Bj1LoEQ="}, {"__id__": "ent-483f324c534f40f1b21494d95fd751e2", "__created_at__": 1759092201, "content": "trainer::DLTrainer::data_feed\nMethod of DLTrainer that builds a single training batch from CSV data files. Given an index, a list of filenames, a folder path, and a batch_size, it (1) adjusts the index so the requested batch fits inside the file list, (2) selects batch_size files and allocates X and y arrays of shape (batch_size, 400, 400, 1), (3) for each selected CSV: parses coil_radius, domain_size and current_magnitude from the filename, reads the CSV (columns x, y, B, mat), calls self.generate_geom_array(domain_size, coil_radius, current_magnitude) to produce the input geometry map, interpolates the B values onto a 400x400 grid over [-domain_size, domain_size] using scipy.interpolate.griddata (linear), and stores the geometry in X and the interpolated field (transposed) in y, (4) creates y_norm by scaling y by 1000 and returns (X, y_norm, y). Notes: all arrays are numpy arrays; the function does no explicit error handling for interpolation NaNs or malformed filenames.", "entity_name": "trainer::DLTrainer::data_feed", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN1ItTVOUCAPDkTpakIbCw5u6yZ8+e73zfd85ZILjKQOTtoWFmXm/G5KNmJClfg48uZhctRzBTzHi5xi7L7nmf7zt7wBy6WpJjSQ+cpEzTXDGNrCSVvJbm1Mh4+x9+81tMLLhagdJ+YxC1o6R0SDqfM6SlLA0dZbLZVMilTgzVRxP8naE0ZZ/qMnPRiNFsDuCW7CvoRHwxWC0deNsdWh2p4lfYHym9qDb5Bb/C6eJ65FjyktNoMuYEJyrk5keIJo+ayzJrVE+4wVmYfFcflYdpe2MDvmVV4OkCA88URM01JrTquk7l54US5jFS453nL+S/7vhQf0FeKD0rtGCvXAlkpyj6ovFfrYqOiZ0wq/G1rh+2FUbLrT3qNu5AYb/Rrz+ur3aawAR+LpnB9dprwV4yTe/O9cXrd53WVmgYZLIt7GVfKtjL+z3XJ9cG5sBCuhSmiXcb2yxFvBnbTB7kkNoei+p3CYdkDd2mn8tQrZfKhC2kqfBL7TF9YrifDLfeFehiRW2hMR/UiPNCiYJppuP7Z9wODkZ0az5zXB+xyswIbCNXja9wn/Ad/ERfFFkiFOBevyxV2gFrGfIIa7iMHMObJ5VixK53uToXmCyj2jlJL8z3rBTfUb6hY2N11hBPO8/5joB0voMcZF+QjnMxcgtZ8RJG1VX2GbDEUJsXacPxw959ZhHuVjLyrnsPMq8FW8EnzKzkU85UKZrZYlSjudJ4NJsM+Rg0Ff5dU9XaRJucgs1CiV/EW7hF5k3B46SCrZ07zUZjAkih0zivLUb+w/QAiX1cGWZHaTezYvIF7gOY5j4IdLaRm243gD4tN8FaaQL1tbJhntDF9z3pvxCaT0/kQr7HTGP+ZT8NCLcFnYxYpFaowSPBMZgRbIK9a8aMhgeU+wOXBR8c8dWbb40tdqbAN/QTf0ls8UvG0/7fJ/1mHjFcVnMkZCwHj6G7Qz9JHeAGF/QifIPpw+dQqVCOewPd/HXwFs8lHTQj2coXOywxPMXaNThT2MHZRrp5CGW5wsE7YBAUBX/1r1UfCJSi6H3FmthJYZ32rfTZrp3ozO5UfL1UIW9W7yQjSgQ8MtktNvrKrVZ6W56EL2hNpIRWyOM7V4WP0pXqFZAN69/2MNntFeSPeJkdFY6JR8TqgBTRlBB6Dr1LlilrrZnoGLTESYlX7BnivUpA2C5ds6biXN1DM/Cf9Ri9bLyHl+p97Qxh/A3gcnCjeYk2yrlgj5CW8/yk6ZyulcP9SNJ2sMvpLlJqVsoFsTL7LB8L/CSL8hsxP+kCEh8VGsDf8FGyMXK/xUvVsXuk6ewc8TX0i/W+fdEzqBAyk6zTD+dViq34WzEDZwkqaId74bjgk8YYt3vbHplDL6GPxNLEgvxPrZLEq/hCpIzb7R0PAlILZbwe4vgqExOSPblnjf1dVB+wxwqZpC1Rpx/kj3NbY2HrsNaJL7rn4HX4iO88P8s8nF/Dv571FOmnr+jPJn8lz7C39JP0IfkdukH/jV8bL2UH42n0DyDDJVoVuBkojb7vDaJMeg+4o2AcXcfzeat0d+jfDiOsJIPsGn8/GjYs0U2KjVlyk3WNX483yd/wRQJvp0vZya36SaNWbDEj6v/QE/ZZa4c5zaNbG3Zn0YnO1datnftiPypJM5X8wvpZzGJyEtl4r6k5S/Wr+lJWSGzCPzLfyxe7NoWn2KlAQhtvN4XOuYbsS94N5ixjMl8CXzbfDGZLVXTcnpe6Zruq1QyrWd3AndIK7Aec83qaJfNznHRLIr+bMXSS9OkL790OG8l3/Pfka257bCO6gtp2+7SjtBClB8vlM/YAnKvq4oBrYvYq5zbslg9oH8NG9ra6JTkFDlPC/UlAtEebnQxH31Qr4ItAkU4DXYlYH9OejFN6e8frzF5tCCl//TMKAqDPs1xeRf7B5clFHjcx7c10ZweG6+MPSfPow3Kl/ahVRxckBrkfeBp4xGRcQaMKA+4GLbfOOv8Hl9KkRw=="}, {"__id__": "ent-d19f38d80a959b9678bd71f5ba41b7f7", "__created_at__": 1759092201, "content": "trainer::DLTrainer::get_B_stats\nMethod that computes the minimum and maximum of the B-field across a list of CSV data files. For each filename in files it builds the path (folder_path / file), reads the CSV with pandas (no header), renames columns to ['x','y','B','mat'], and updates running B min and max values (initialized to min=1, max=0). It returns a tuple (min_B, max_B).", "entity_name": "trainer::DLTrainer::get_B_stats", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwNymtUFNcBAOCTQlK0iJig7roPdmbuvXPnsYpWc3iIhaARGk1AVKIetFZiaKMpJg1GY7BBpUrAByqPfcy+5s7cO7tLADW0Sm2s0qoN0UNiokdTsfHUNq+WaGqOaGy/319HPN+Rb0zEJeYDvcjfrxxQltCfcVMDnLycNk87J0XhNfBLczVoUbfiIifE38vpCjb6cWPsE/2Q7yXdQo95V8ovSHPwHetd8To31q16MxOt4kshV7eaeI4Wmss9X4Wq5OtaKbsrXGUfRDCttqhRnDhv3GX+jmr1e9JCK7AdLcm5AXLBAJ3ZLcy8qlbSL1lloFep845qbYkc8Ibax5XwXxjlyNmFSbs1MGmyZyXYhcrl6neOQtvhFk8DFOQHM15v7KSmpvO/4yBwRGYFehPfiBWsMbs8nirMJ8fc55U1cRe4mH3Nc19LESGxkwmRfdIPpNtwBT70xGvA8NT7yuM/xLl8AG/X0aF7aqP2bPwndhkPKLV4Yfi7GWMOTn+vdYuR5uq2aqeWk7L2WjBTEtRtM/KzL3I9RlybhGcka3A9ektYTl/GtZ4D5qPqQ9Cm7pgy2zMfd2DEpivD5hVyAbUG7bJHH4Kt8nvKUWF8GEFIGqzDyRzSJ/10Gq9fBoWdvxi/2FGC79FZ4lxxhSs15g6PKX+wm2QNnpb8MOht/9ycbQyypfI468W37/NlSVP9b+IxGDNeRRK/WX1LGi/2JQaU1/krsSvSKvteIUuV2Cz+GFcfstkgWSB5bfl4FynAGaQ5PRbVY4OPP4LXchw96nV79zgLyPvwTVenkhltUn22Xe6P4QFhRCmVtnNqUMK54kBiKasKZJAH0U3/n7nw71m3SUW4VPFJn1i6idVU77bAbyPvwqXojLrTbGJ2kE+ewa34JO7V9hrDYqNvAGZyf5TD3EeeRfqy8Oruc9ICk4N/8x4PfkobiN94Si90rIinB/MSb+P3YYv4L3TddXvyQ840TuNFoRaYIg/hfnzTOedgs3gcXQYj8U34iPEr8659of1578tyL54YnZ79CgxMKHNSaQrcaVtIm3Rb8PzBTb4b9Ih/rdATHBTrxIeuDHI2ugq7XS9yG6xL6LLsQP2e/WA8mGeVZN5COLGONrMrmNBvwJA5PflX8TP+UbK1400xL74mYtfT1P3q58F8cRwaRc+igfAN0Kle9XwMnLERbtS0UUEc7MLWB/gfsd3AwGmeH7HV0MetlLahRaQSL8I/BpyOw1+GT6Mx7eiBYPM6esrtpX0CTzY6+VAvLtf20wsw13aMZEcLHEmHxt1SN4u7jZ8br4C7YcEoEmYJl8ifrGF5SG8DRaQHFksfBlPM9dkn6DrGsVVwVJ2AjofzxcWcHa1n7qwx1sZtQZdAQFoM29i/aa0I6ajymuAVMzuZg8kTzG9Btb/IaqJNvjRXvbaTdbPhwEhyDip23vTPjl2ApZECZX3nDvcQXCt+rWjgVXGBfMZ0u5y4QvyOT3Uf9j1NJoZ+HywJnaEVPtlR57pPG8KloJilUad+PHJS/ic4xeof36QWsBI029EgLRM2KpjWIJVucU2WT8Y7/ZVxEr1jqcqpeLVS2fUOe57uNKvoI96b6C/4ltTDV8BPrf5pz2hvoICWAtdP+czKokPGk0Kd3GjOQ8PRhJRqy6Rbp/K2pG4KRA7CNeEpICV82iozRiI1KK73ojS5qv0Bs5mZRh4cCu6jO7y3s5XER7F5pMZ42MUUe+yO/CTezk5ZUmIw2sUnOY8x17U5eJjkofTQNVolriCTEjm0GGrmF+wJ0Sdu1CeLGbCM/SfyNanhc90nIm5ur1noLpOKEy90VUY2KH9We4TL+h46JBW62o35imn7lp0JPC31heVIdTQ9Oz0YiGZpZqyRu4cyzI5IjmcfE2Pqwef8HcFj7MR+D2hh48AheJZdks9Sw707tB2f87u65LYNVKEX8RLrPPzK3EVOkDwrwI5oU6O/Rr8RAdpDlrmr+IOgjs5NOMz/AU6Uiu4="}, {"__id__": "ent-ca6f7cbe47c53ccd1ba9abf342ab2380", "__created_at__": 1759092201, "content": "trainer::DLTrainer::__init__\nConstructor for DLTrainer. It accepts an optional config_path (default None), stores it on the instance as self.config_path, and immediately calls self.load_config() to load configuration settings.", "entity_name": "trainer::DLTrainer::__init__", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0/tXVHUCAHBD8oGkKTXgvOfO/X7v93vvwLCUQlJmKNq2SsTqSvYgS10jdX0c8Ogq4lETe8mowDDcGe69cx/f773DkOvqQSofSbKKndyOZ0vRRZNC3FRKJbfTsfrt8w98YslM9e5DdY3z9NvoYOQb/ie81LzsrIxlCOvld5EDp6B18JxUieYLTY0+pW6PjVuOXgdHJ7Uz+eGRtJm/x1/wXwlsB+32bnLBKFXrrYLsa0YqiSvTyfeJcfJI/SJzAc6GT9CjmjPpj66CVbY0ssc908jRkOcD9q/Ca1IeXphzDDrzDPuRyW+aLyTm5OXkAmuauYVuQNeEWmdq7EgUCp1KXC2GJ7lNesQLGxKk2FvtnqmfB0lZhWelWs/76n94kR+OznKNAvXkjcQX4qy2jepYOlXfqVaACdo29IHORlfYq5gZ6vm4B2/Ce/juB2K+x4xa9iqaoXVhh1GsHwJ9LiwsEA3pWIx6KsF0Wud1SivDnski+Duv8EG4m0mjzcqA2uD+2bxjRs1F0hfMSnQdXclukZ+0nzJetgp4uz7CUZf538g/lC9BEe3E78rB+pTs8t2n1JDlZybiIf/JxoF4n3BYqQJz6Hu4LLA2cDfSziTE5+EU0td2K7FMSWemWe3qeinVPWSWxgWPGN3CZYM6soqHgVLZYucHdnkrnNvMNew06StSKTwahW1hUJ7oForpJW4ZNVE5vySQ7mWMKnMNPq3s186CIYaAX9EzYAEf9D9nFFK3uhrXyC8CxlwZyNUrW/9Fv7ZFsm7hrHiw7UF0iTuMM6T32W9BFoyPf5U+Dzv0+4xCbqAR3A/GU3Kho97LmKdJwd4l5hOuUjak3nBu0f5sditn4Ifqi45mMkb6XOtHHGmSO11v+MMuDIdlg9O4/fgY4jz7SRVDQw6SyX/jUPH+eIxvUJd8qIKFmit2AL0AyshQOKWVBe1qD8016jUJZcGxsJTnSA23XO3Qq7V2NoX/jhuj1lCMz8IaNgSqYXpCQbVOL0ojZyZhsI99z7zJFdBBXOQuiZ2MrOM3qoviZ5UvySvQQf8izXWvxjZSzeeQX9jBJPZsFURqAxOte8YnAcPbr3wqZJIrJsv3MycSzWaj7hJjxla0lL7k38v0KRWt5eKPrqv6XTLaGCVOwT3cePhvQdCL8FxxV1TCJaSDVz2vBip8k+kv+nRmgkXdG+kUHGRm0iAd8v5RSDb3g1EopIi+q3C7UqoviD/lPEf80Y3C4/bF5onWiHeGvrplXttU8rW+yvrZKCMT+JrEcucB8y3fWPwjmk3GtB4Xp3Lf+WLaT145FtHuKzWGCJPGIpKHPsK9Wm/4svpP9dmtOxw7glNxSH4nvglFweLEIX2Nr5jY7BfdT/Kzrb1kPShg+wjOVkAjKPJuZiZxhVDMuAaRtdV9fmKH2eUM6H20RMzy3QQHND+YZZxDL+vbcRZYIbRwg79rPu7gVsj/D8wR8+OL8YCjWhiDp2kbZHsyqLnoQ6B839PR2QZijsLiqA8viE/iwoG/gR1NC8lzk4e1xyIP8tA3j40Fcoigp3p2ij3WwCPV5KJRzdqcvSjHgLzDdVc/pb/pSyOf4eNMqX+u67JvpfcgXeues+8GviPmG4VCBVmmjnA/jDpxReS6dQLtxFgNgUviAf/1cBhEskeiYOQ2m4HHMj3wGSY3fBjdkv8nvIIGjGypuekce9xMwbkoA16nb2UuoqMTu4QyVILHozJit5719jTmmkV4HBeRQ81p0Vbpbel2i2J6/YO0F9zXQ6DJ009uWp0t6cAr7/bPN0fTj31BwW2Oe6RBHIS5TBfqSuYb+eoR4XMwrFyz/kBHmnktS6R57GZVUofpIW5pa7de69qtrohn/v6znTilGOg1vpXc/ntwnfqwchTe4ev1EcYZ/aB2mnxiG8W3w3wjVfNJm7kkGTDesYaNDeIa8iftcVghD8dLyOvNTqOLTgHpSpq+lhSqtoav/LdQkZ5jytJv4YydvA=="}, {"__id__": "ent-eaa28144689d1f815de45b056c8acec1", "__created_at__": 1759092201, "content": "trainer::DLTrainer::load_config\nReads deep-learning trainer configuration into the instance. The method chooses a YAML config file named \"config_dl.yaml\" unless the instance provides self.config_path, then checks for the file’s existence. If present it opens the file and uses yaml.safe_load to parse it into self.config. If the file is missing, it assigns a built-in default configuration dictionary (model: img_size and channels; training: batch_size, epochs, learning_rate; data: normalization).", "entity_name": "trainer::DLTrainer::load_config", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0ItTFOcBAPCURJAaBQEvd3Ace7vft/vt43zwSJiIUx+D2khNGh2UxEbIJFKbGiukjNZEE6hGwRpiIJw89u729tv9vt0FNAjaGaWNCcQIaG1E66tEJCMpKc0LIxML7e9P+G1w+OgYd1N8iBSKsVFTShZuGpzGx2PxC99nbCkqgrkopJ86ukk5nXoxY9w/jvLFXm8H1DJUi2rHkcbtZD9QfiPtz0hSf7ACkSesuYE4Otd0kddsp20c3jFvkSNCXHgWrYjm2cvNRXyVes64jM+oW6IpSGi2xSXWsHxbOYDyF03FP+evt1c6by86smCdeU5fZl1gn4QDTKWeoLdLw0a+EQdKhUqj06xXv8IQd3jfiLYKI2Qh2o2HU3tDiRJV9jYPhpfQSuY/ZrYn1koWqoxIRCX/akmkA/J8sqxxPHKPOxmZCSeV2fzbcEgbhbOS9nMr6Q7dlOax36ZPiyO+G7xfmM19F34fn2e+MXS4zso3q8FuoVa5hLYFsul28lrjftrd0EM6aa6zu2EfX6R8LnEL8kwvyKk9aKaC65Hupl1MP1iRsRNWkD74aOoNX1ZAAWPmVXqALxdV0U3+RvagLHKN/4Mt8tVKLVpO3iL9iWGhlrQ7iP7bmCQesjUYp3f4KpwSscy4wWyUV4HTxi+kuwrvh/CinJ2y3Xve/B2eOvJGtDDYaxwne4T5Tq2SYs5K/7DltFCdMiWfRV1mKVGkGXoSHVXugvXhUjEBrQZPQ6IlWMlkDfo5e9Rv2LHNrWoMyME14HFxq5itxbU+L12FlfyKcDW7JXEPnGPesu20crvMs7RulBnzvRwewHLoGtPrHCMR75u0jflSVHEdXzPzSrRcWyeewd9yM3GFUe6rkGKsUWhzVvoe/kToAGhFn6PvYWxgIenX3swohpm+pQIjTQgP9C3iR372WL7SjT9BJ+FSJtX5LlzjbUEF8FT0VaOerofFPG54Rvwm+E/fe1pdUDJZXCZOCvVCgV3DP+YmzBX0unDSuYO8+I/SBfyw+xq/iQ2RHO8Q+a/SGz3SqOFnxWGcaS8lsnmc76MB/DFo4t2RTcqGjF+Km53C/+/wTUpd0E5WzyhTwmB1n7jLeMH6q1wGhqz72gvej+a8g2uEEqefZjGHtQI1WbukJTW16b+2bT4PXRTThE/g4/QyN8b8ma6RB42N8jZ0T3oJHaZfSvvoi3gzctOIjN1n1XjrH9zraKX5l0gJzNR/79sKqsAO385gQ4aXuPRHxHpYbHXhIX2u9bW+zx6I/MwsNFktPlollBi/ZdLthPR3ocP34dX4HjcqqOAqiJBq8Chx+0u5WUJT8ETosniXO4+7xErWnTrk6RZOLhhEYSBLuWIxd5+stQ76gNUOXobd/Ibm2cYT4gifa61V6oU0owPthdt8SUIXKhXynEL2C9MwdKbHfJIuJEP0AZhWrciuhh9AHZ2PRt69hFhYdGi9MsT5fKeY61IPuOOvQLdS50q2XMRv5Iz2GD1oyVo57sKnaEHqGP8j0wwVpk39k7xWPuC9oD/rXZGyihlBOxpvo8VKoh2M5NYPsGfNB+ADo8DwkO1imdTmuAKx0WfoT+xp/rLxPdjs/xR45FdQpmg7fq3YXKOsMzOjbrmrZbm5isyRmsRDukcvERjwlPF+XTC6AczPCOpjgQt6MpkH41GeeZ26OI+egw42gUC3fxnlQhYZdL2Kt6AYeWG0k5aZJSTgtCDVe9Z/kxkHu5zbNqXznMONM+RsvoOdbpx0pTcvxp3kPpdT91JDr/GWcI77ewuxqDolZtE+/hXyox6jvyexOEt3hb+KMm4g1zgesjrcL6uwEjxt38IUFRnt9GPtIdDjLaUTkSrSq/4KtzVVaHOsoHZMn6E+559I3MfNU6pbenCu+bXQAA5FDlt72Z962kI5YDItQamip8O7yTtCKz4eekAnzM+gy3wkVMQOhjrTQWua4YpMW0lwQrjCa21T3InwU2gYLSFHExcb/wPXLamX"}, {"__id__": "ent-a2e6e3b14b043ff131478ceb95886be8", "__created_at__": 1759092201, "content": "trainer::DLTrainer::generate_geom_array\nCreates a 400×400 NumPy array representing a filled circular region. The function builds an array of zeros (dtype float64) and computes a circle center at the array midpoint (cx = cy = 200). The circle radius is calculated as r = (cr * 200) / ds, and all array elements whose Euclidean distance from the center is strictly less than r are set to the value cm. (Note: ds = 0 would raise a division-by-zero error; the array size is fixed at 400×400.)", "entity_name": "trainer::DLTrainer::generate_geom_array", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwNzn9wFNUBwHEDSHBScAglXNLbu929996+/ZHEQMEfBDSARKJxQjChxRSCpEqDMuAlQIkhUH+GIRPAxJPkfuzt7b73dvfOJEVaxx+oBQEBFRqLKENLkfAz/IiBDkiC5e/vzGe+LyWzyCy4QHuGPRKzzGt0GKwMf8r2Ugvn8iOUY9oe7khi17s3zWeVI/SGPs2doxTLq9kG9Sm2UWZgmXBFWSSOw+eBB+DUFngTq64nL8gqpBm+f5pr3F57sjWS/kqPaNXWyeS3zneR1kgfmvdee3gmezOyNtwcrlJLWCZX1XF/bE3Br4nfaaRDzuf5N5TLvn+RA+QzsF85bhJQxP2YW4464B/cyh1zaVbbMJ2yY0rkQKTTM4pbkqyTviVl4glWyL+S/zAkv2mIryERMCwccs54zhg7vX82B8wP7FL9Pr3M3iatMDkxZl7GRVaT/zC2aB5dpzJ7itSFz9s5eJP8qR8DlQTAIemheAu3hxSg6+66QIgfxrNz673n8gD4gSwBp8PF/AI2AxMT8kHpgFotP6J121fQOTZEbtlH3dxs1Xkh/gn9LZzqLvPV5W7hX9XmyWxiLbyl9aGLgMabk0Gp107vIBNrEKd+DhZbW9hWfDZ+iV6w59HjobmGGFiKr44tlEqVmcp4mmM8Khcmxjrfc5u1VazL+Rp0wCfU39t/u1uK3d+hO3Q5241b7HNyi32ZPe55DBaxJrVGmGoTn6ymEhn6GjBfKgn44qq7EdQoy92VLF1eyq/P3oNw+zDmXT+4BKeAAslAMfuiU6Lxmh+UGpO19/gOeS7jYZ/8hTWGZAqzvCfEMlPBJHs2qRWC/vOmTpsCVPCJJ1FQXOVMhtfAdKU/kQ8uswp1qvA2kK00oU4rcc6SvuxDYquAtGrttPWNcAlsxxn81dhS+ZZ0mB0Fx/TnUtdRVWyBul4FqIeMsnpCg9b/YqX6N5GoXSo0yESeLy1AR0Ua/ln5R+A1w8Vu4C+oPB4KZMT241r+e/QBrZDXk936fOdR0qhMjfk6YKKLVqv95n1+L74itbB1GLkGO+X7KRFFQTRdDhqH0S6uRu52qvUZaAXs1V4Mj414lH5UzK0Ve+SU8xEdJ+4jO92ddgN+kL8A33e9ph5+Xu5j34kX2Vb2k39E6iU+OzdNF6xDoBykybW40ZwADd8GPkNaDV8zg5ThVawHP6tsTGxSR9G/mmHfdenjcBd+IzAr/jB3OGc6WB1uzhlHaq0M+5q0SBggk2A9e2vbWpaGu0la9nZW48DEGGCoV9kZb5b2YWSn9KXY7vo6b4GX5XSjB/dxw2CZexYPgztwsd4tvO+L2qb1oFxo9XaWWIs7jsgTtTZhDC7w3FbzaDu8F39GXjb/zhV7R/tO+rPC9dpxblt+ZnpSTMdVdj+epJ9BpwNt9hNySL9DcWJb59dWEfsq+XaA0wuUsvgQmGC/glcKBnsyPki68DW5ESyS2rjK9jq/nnta+gTHuJJkNztlH3Q3mvvhHDon0MAOJp5Tj4UstlA/B+6AlfLou+JMOdXZ9O4IsY69qIS0e+kIfAH/SdgnzUjWW33mSLYMnscLHT6vWMhwlpg7XF/7WKVV60HN4n/tfsU1rsNTDEQ9dilolf6T/Ld3ttEE/UoQOu4GeyhEYDBQb38hPkN+tp5HmcZj5AdvN85wfrHLudbEJO9qv0bfcE66hDPZA1YV0enH6I9wRfIG2UX20WnyLvWsU6RtABmp2am9bgOtTKR5GwmJv06anYHklbjzzni82KyQi50hf5b65d0LD/SjWVadujA2GLtHr1Q2663RzdSLR6O98TL3K/ZQIi4YWh8MW9NT01CLtRz8gpL+VfHNyWgO3X5bbGc3fU/CTaTctduejlbi7nibegqe4EamupMD5IVoTuB2qIiNJ/m4WN4hD0ojkxWRQiHLqQRRNEiqEoANBCppGjrI1uMfzSWw3MbyA6QDQe9Wa7fRyyZEM31zkvXsov1/7KOmmg=="}, {"__id__": "ent-6a382e3d68745c1684c15d51841fc666", "__created_at__": 1759092201, "content": "trainer::DLTrainer::my_training\nMethod that implements a simple custom training loop for the DLTrainer. Given batch_size, epochs, no_iters and lr it: (1) locates CSV data files in ./data/raw/NL_Data2 and records data_size; (2) computes B_min and B_max via get_B_stats and stores norm_denom = B_max - B_min; (3) constructs a model with get_model(img_size=(400,400)); (4) creates a Nadam optimizer with the provided learning rate; (5) loops for the specified number of epochs and iterations, each iteration sampling a random starting index, loading a batch via data_feed, computing predictions, computing elementwise mean-squared-error loss inside a tf.GradientTape, computing gradients and applying them to model.trainable_variables; (6) prints epoch wall time and returns the trained tf.keras model. Notes: there is no explicit loss reduction/aggregation, validation, checkpointing or learning-rate scheduling; data loading is done from CSV files in the specified folder.", "entity_name": "trainer::DLTrainer::my_training", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN041TFNcBAPCgghGqiIGTk+Nub/e93fd297zQYrCiFRIQIyRTCcGkNZGkVk1KMzSiUGtjQyiNiSZBufJxx91+vN19u3uH0ppEQ5ToKMRqUyZaDUlxOuqMUWsyFO3UUsf29z/8qox/aBncDH6zLeA6fC4xn4u6p7lm0tc9rW7Tq+UOflxKUMJNSY8sgKAKnAI6ag/9SFis3YdNzttCJlZgHVrm25t7za62P1Fv22UydCd1bHQ5h5IH6Aa33q7J+y+QzaAvZZeBKutaoIkE7M9IiaHiu77T3BE7nTsIm6S08DTMhZlKX6r24Z+He51mu4jC2C3mJJ+khpkZuijk2iadBB/qW5Je7/eUipw3yTHfu37ZrcCrwDNQ4h6XF4Xfyxm3G5Oz4CpmCnYZV3nGrQSzUrP1MmMjDBrPWeU+EDtCs/Gg2Ax38x1WhbqCHMQttJcUi93am57laHX8lwYT+4H+mnGSPo+ejD8lDbrPRFr1EXxGutf3M3GUvuA0KIV0af8W45zZYZ0yLDEQfhmfX1xr50KNvA0Pq5fUFLpjDilV84vVbuML9eFYEzuOTxgxYY47gg6BUfGOVp2aA0W+TyhT84Rj6Dj40BqzquluuMcftRrod/GzehbzsrOT3kPr/HfZVtIJt3Aeb7srgC78Hn+clnMHYtXyTqZeXU5R3whimRcK9qrXk1flab1cWpSfGxiNx9FC3PYO47aFTiz4CXNa3Ipa6DT7Op20vwDp9ivWWerHlF9G51pDwgW+IbeQVJK7uJvdxz5hPSgx8LivIMG4dRqLn7aSpEja7NT4eMjwRdxE7IFeLy1D+81GOOBtSBLzNTDsUGUS3qQIVMi7RKTcUl5SnhSw3JZqERuBK04y3+o16mH8EBsVzcXbYstgC1sMNxifwc/lLGZJso38U312oEa8Z63BEponPOXqwjW6Ei70h3yrwRp7ImcV+iCYxd7J27boCqdLS8kRUIpK0JgoMv8yvio4GKgiIbDJWRFqdhbDPcF59p+0FFeuNWj+/nlggd0jrMUNcIl5rOclezq2DXYnJZrHv9rbhlaEiwv/INaaGLeHFFLXX5DcSMpCmWg+mg4+D7Y7mDuPb6hzUg+RSqnUHQY+96T9NWkAbyitpJ/c98/Uf6yXgI/xJnmWdBodNW6DTiWTruA9tELIkK+H5npk7fvIT6FwRtpqXMaNZEi74M/mj/6Gxh/FpcD1340OoffRKNvcV0S6rJrkX7jNwnptVBgzBp1L2tfKUVKbyDL+f8+5H9zRczZYEl1K6ulOe4Dy6mMLN4kTSoBZSYeMCXc9s9F3BZ7xLtGelvYFp7SwesucZlVzTwKFi8VfFN6Ew+J28VfqK0o+b7Ijwjl9x+5BvVbo1srkaQ35R/RP44eF2Z6L3Bi8CWeIpQP/1tTXL0e+RYeSRSQ7+4fql2w7XV54zBD9aW42fNC+hyLAA7SQnY7Z9bjTlxYo8T4B1sR+i0+gE+rMxK/pWddvCajDmOu8YT4nprGV+lRgAlSQT9B1sVUvUk7hU+wM9LHYirqiJopa59mIdtVMWkf6y02cU8iuM6vlmRaLu8hKN8NOt4BzgR1GIdwjVLOlwU3J//DvWlaETaU528EuZ7v6uRtFjRjoN7QxbVirL9hvtMSXx0JCE1XkayRi/BVkwVTyivWYurrf5jPkjtBsrsf+G/i7VW894n0LX5Y/jVwyVr+1Vu+kXvmkEKFbREmab+cc3Guv7evQD3iWoSwUJh6SHyRxm//KaCHh/F3WOpVHEXsJigqs76eJVqOdVi5q02/jwZ4y4zJ/IzeBgoVBx6LpwT/jd/jW2PnkxdQOaSLKWTNpp7pDjRsX4wNOU/BL+g3jh99YvbDE8JCzeoZ+FL2ax/Y+EP2OW408gReDonVd+ii+j+8MPop7sMf2GgoZx49bu3qmtDqnLuGHf9S3BpdyG7ip5O/72+1+s0NIk/Klcfd3/hLjBrvfyI5Desb+HyZCkic="}, {"__id__": "ent-fc45e50a7f1a139be1170bed9d3f59d9", "__created_at__": 1759092201, "content": "trainer::DLTrainer::train\ntrain(self, results_dir) is the main training routine. It reads training hyperparameters (batch_size, epochs, learning_rate) from self.config and computes no_iters = int(2 * (self.data_size // batch_size)). It calls self.my_training(batch_size, epochs, no_iters, lr) to perform training and expects a model object in return. The method then creates a \"model\" subdirectory under the provided results_dir (path-like), saves the returned model to field_predictor_model.h5 (using the model.save API), and writes a training_metrics.json file containing batch_size, epochs, learning_rate, data_size and a placeholder final_loss ('N/A'). The function prints progress messages but does not return a value and does not compute or record the final loss.", "entity_name": "trainer::DLTrainer::train", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0ftXFPUCAPBMBNIkNHIX9jkz3+/Mdx4LhC3n+uBqaiW9OIlovipTUNHCV3nzKopw8hQReQgXl91lZvY7M995LFRmHSkMknxkJohp/WAPvHqzq5l1k+PJk/UXfH74vG1vAqPJEFutrWFPBAtQB5tyhqn/Rrulf+pvgqT4WU6xFFbO0HEqLTCA6tsT8FHhMl+TOxu74DazRNyCjvkQV6H+wZfjdfogHkrdJ7D2cqUXx62bZG7rJXOHa1/eRTg1MAdVWFViJc9gYvebihY2IgwFdnEf+LuEZ6llIl8wXqlFj9nP2+WFO0Iz8EySrk9j59JDnC9zufIfcQnHMrflLt6TXeG8yYaUufYEd5FxLFbSOUU83LGatjyTpN5QmiKRbbAzuR+fCRRbKnXY+dJsSa3yvpjYLIBcSV/g/R78TB6mFqM6cZHUhVcZvJYu1KZKlCyxKZIOT7JeMlrfTV9T1jnPyVWMRuaBeda7ZBzpz/9CuAWmi1fVIhLxjk32eH925+JLesi6khwRmoOlhWF81rPCS8OlsBFcUFNkO1sLb+T8ZjdHznGF5oCAk1WBItLPP8wf57YYa609SjFMR+vNTGuWsIL7yirXDhszlFG+DmWjo2iVylcGpXP2brrBBNRs43GUJbzuTag5glvq5qeQCW0s83+qHx8Ch82jxkRtP9kZ+YHOsxqkR/RXuQtqHh2m/yGu5DqoJcnr4q+ufPO6iPk1rt1sG1qjLWNlfFDNb0ugvWA7q5qL2e36EHW8w6HfQDnoJLvIehLUBO/ndmDVLsAmqjZ/MucLD2jhxAv8SX8m06gU0Yy8lj7gz8B7yDNOkB8f3BrLBLXgqrs0qkhHxZjxo9aVaPUslwJ2Ljzl62Yc6ls1Ha5Hf3I/7DshycSUOrVPQANX5X5HWE0W2I+ZHcZHzi9Bt/5G4O9Dqo1MZ8bZl/jbShYcoBfZA2DfvtfibSFXstfvoeMwpixusuld3BU+ZhV40tkeHCUl4kFbzG+Cg8GcQLbT7JuaNVN7kZz3HwPP+8vS6uRePZk4Ees1B/VV/AbHR69STjFH+SOFNHlbLM373L8+dJd5j/yTfpm6Q0hy2fCEeMNotH5HQCqIfmcfiVXy1dzYQJ0RJc3aEbhQieiDiWWMX7vTvJUs527wTcx9AYA3oGe0j/NWgwazMurQX4gH2WvODt+uWC2dAQ9Zj8DJSpe50HWWEoJeRYksQH4wy0ig39BZUCNvUw9Zr9jdcL282fi8fZPBmXLyOGkkfVZ2sI+uJBXUW+R0bDEZ4evxHG0J3Br3wYUo39WuvKe0tBenGDAf5UsBdDdbh+YL33AINRGlfXL8HTI6NElqABu4OvSH/Ls+Ju7RIonJrSuVYVDvO8Y3cd8wT6IasE3uJw+BhmDmpNPCCN2HdjrfRg+StuD9zJDRZ4zjt+IsPvdvA7sX8c1MM70zeMBvxQpzy4Q9TbS1UbwX9bBxZhM7Wx/PTQYTlbFI1DaSkHMTjMHn7ZTSgmpQKa7SytV1MAJmiKWJtVYLbnVlQI8ng27Jy4bD8QbhqZw0aop1SU8FBeDmMbUVOfpHqFUJGzE7RCbIr0qbqYu8R6DBXrSURNUpZqc8zxrQsfScHcarSTk/Czzt9JAMfW+sJHcQU9oedhguIDdDI+oLiXNgL1WR+jc54M3WR9Qt8MdQWDtCmo2bZl/gZX9l/t2haa00EwuQwApjqvh4e5kyCj4on3He6jKtTepC9Tp/QRuEhvdfOIjGBEeBlbBXfd/QnU+0KL0Sn9eXoK+16SQcW0r1y5b/lljGzQpmWUzklDAncE7+1Lriny5VwzLvgc6X7D9ZO0ZZ1qjCwDTttOF4rxvLzdtJwv4vmYZLEg9O/FTv1Ku9z8JrqN66Mn6O/hC5B22RKWeecEEvwu+1u331oI8U6/ttKFV0jBG7rUZlmBvizuPdfJg8GmhN0fGL2mXyIdsDv+Zcljd5zUpjh7n5zBOxq8Zf+T2VLQ=="}, {"__id__": "ent-9d4df0a8059d5d7302425227bf4ec7c3", "__created_at__": 1759092201, "content": "trainer::PINNTrainer\nPINNTrainer is a small driver class that configures, prepares data for, runs and saves a physics‑informed XPINN training run. On construction it loads configuration from a YAML file (or falls back to a built‑in default set of hyperparameters such as network layer sizes, mu values, learning rates and sample counts). generate_training_data() creates randomized training samples on the fixed 2D domain [-1,1]^2: boundary points, collocation points for two subdomains, and interface points placed at y=0 (interface values set to zero by default). train(results_dir) builds an XPINN instance (expects an external XPINN class), calls its setup method with the generated data, runs a training loop for the configured number of iterations (prints losses every 1000 steps and records a loss history), and then saves model weights, training metrics, and test predictions to JSON files in the provided results directory. The implementation assumes the model exposes methods/attributes like setup_training, train_step, get_loss, predict and TensorFlow session backed weight/bias tensors (weights1, biases1, A1, weights2, biases2, A2).", "entity_name": "trainer::PINNTrainer", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0otXFWUCAPBKzUfCFSRE7vUyj++b+b6Ze6+Ps7ogWZGGQfRCM0hPbpJ6sk2TEDmILHZWZA1KBYHL5TFzZ76Z75uZS1pWmrnKOfnI1jV1zbTUjnR8dSQrc1dic/f3N/w+pWqGN+Ej8QsvDw9kHZKnKo3sA65mXL/4rP2o/ULo9zQtchoWti8P/DGwXv8OTFYekJvwkFbCqqQ3jG/hQ6ED4hHl8bScdg+WOS3RM+4/FeDWWwFm0M7EK/Y852O6Fd4TPctqOzO8+THJqcx82FvthBNl9Kqld+aGlrCvsShEUcUUyle05rHpTsaUvZECd5VV37UWDSrn0Ewy1zgYPoFX0ftJjnLGqfHG4PNby/QLdhXNFOsTw5DN2eoozg+lcIn0ipXH3RTeCDyFetxf0GjnFt323gKjn2K5ll4D3sR8a6b/Mr9MPYPLQnta+0SGAtIM47C5BFTT9nSoumxJxnXxMrxhjHf3qLOpFIrQl8lTbnGkFX6vmaF57gn9sLWKfUWioB+MJ9n2MtAVEYIlkfP2JbzS+lXc7vdb9UpvZj4rTOkyzkGTNGpLu9zMrMCnaJ393+B6NDHMaAW9jFKzYMbaBw/EUkNBvFt7TR9tXUentNbgX8wizjLatBY2zQyo1c530rdWLdqF+7iI9yIeVPeLfyK7J3haX6yqfbV+wSrVrpDSrnVppWApaVR6SQMeDvxwGH4U1fCzxR9ZP4rgMEkKhZUmTwBBbiCZU1d4l6L1iV2omstr0sV3hW+AaSYRYEwRRoCXunPpXfm6LIN8K5KWSnPwHlZtnQm1g5FuNO5LS+bjbKt8F0CkalfhfLGOPmBP5310IHZvz0L7pD4DZ4cvd78Kc0mDVC0d9KbifOl2aExoNlloyvItvCj8mzKWtqKEXiFlaXnSvWou/RvYYE8yj7rr8UjPB6YhhDla3u0LNvgldQ3K5WexenEZP0734YvdNYDCAml0jANvK1vRWnUUPmq2cPvHpBlaIMX6XdpP+vCgUOdM6rgDLzjrzQHLk/Oca/CAKhrbraGmd6jD/UNe47S6YeUm/zz4PiyNmCV7JGdzqfyY8zItIp9wl9ReMx+d5BI07s30c8LBnkr2NFPFHfHb6gY3TlY4O/B57WeSRffHjgaO0baUF8SVMEd4OOQzhpSHotn2SPF91sjtAz+FeskmqxiXW7p/rXLDGYbuWEkpsvwSrpM7YzeUmVL1xGZ4lhQrVVyM7Ox4XYuay7fsDGgkSY8wh572zzLOmiLXxrIzk9mc1ia0GeZonPIfwugP3bPsDcHlwDCnxI/bjwjpzgT7vcDI8DqB81eqe2ELW6TssNo6Uy1sfhSpC1Qqfxanoft4UZ7XXQwu0h/EbFOS09EgbFBzSAoM2ynGaumJ2ADfgg7Hk8y6xkPsilavr9KLJy6gX2vpQthKhYU0F28KPKbW0t9AL9loPsnelGT8sb7CPCgMgvFSSltj+A8kolyJ7QQV0M9/7v7Vu2f7MXuuafJzsoqkmx0/gVv8DadP9SmLuTXyPFMFu9BUNag1g8JQT+YY/Eh3VeytzkI2DC/GR4ZvNpLUsvSFUoy+7n1OSs0fe+43CvD0jsnhHBu2bGNfxufERisr3SV0i1Lg3mVvsXLMK8cdag0RCPeBN+lF57AAteeM2eiIr5wgKRg7wj6gn7VD8T62Sc78/4vd9nEyOfiLfsoO4A54U1/D7og1VknyF1jgdfkz/qT8RLy5NyvR2TSDX0g0VBYUtpXAcdHXRn0TjAeTveMdRW6/44O30atuHk5wGbQMUXMxPBcPhr7CK2kmv7H5BPhX1ofuVftULB0vAse62hPVXoF8CswlDWiBUkCeZAPxzfY2dIimyd24oKvHzIBp4lJS5I7VK0OF1uTO01ZNepE53PjZ/jtazSS8MfBvqQklrHd01PwgvkS3sBGBLydNj++NM2tIrabDhVpnuexa9TRfSfDzUThRgso7Don7JnHsGftX53+2MpJ1"}, {"__id__": "ent-7a6163f091c11e6457ecf48a11d6f94a", "__created_at__": 1759092201, "content": "trainer::PINNTrainer::unknown\nPINNTrainer is a class declared in src/physics_informed/trainer.py that (by name and location) encapsulates the training logic for a physics‑informed neural network (PINN) used in the MagneticFieldPredictor project. The provided metadata only shows the class header (class PINNTrainer:) without the body, so the exact implementation is not available here. Typically, a PINNTrainer is responsible for: initializing the training run (receiving the model, data loaders or collocation points, physics/boundary condition specifications, and hyperparameters); creating and managing the optimizer, learning rate scheduler, and any regularizers; computing composite loss terms (data loss + physics loss + boundary loss), performing training/validation steps and backpropagation; checkpointing/saving and restoring model state; and logging/tracking metrics and progress. In this repository context it is intended to coordinate training of a PINN that predicts magnetic fields subject to physical constraints, but the specific methods and internal behavior cannot be described because the class body was not provided.", "entity_name": "trainer::PINNTrainer::unknown", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0otXFWUCAHDztYpAkIiXx713Ht98830zA+TxWQezNFAD1yAxTU6plazpgposHF2VR2kPH9nScoH7mLnz+r65g2ZHMtyILRLPkUVTt1PIZj7SspWjJ5ZgU7P+hd/53SI1elVkpVJlFKKBZt6sFl+gU7gKdcGUBcY1MFZ8gRyDlrhYLZC8DEc7UDkaIx/S1jDTjKFgBgrDYrkuPRWNxb2IRvPNUi23pTor5HaIB0mFO/bQT/SEvcsokCjzqLWK89Bb+LS5S7ps3mh9xOkiRWAtypWqeQRuw6bszQ8LuofysfnOlZx+aV7sM7KN/AVVK5itsDJoo5Ku9rW8adbgMe8uJ91mjZDNPRfO0x20v3WRek1/GtnSTTGstBkPN9eiY+IkEif8052lcS62PO6IkOX8AS8PzTYj8H/OH7kGNEdeI6xFW6IRMt53EnfZXYysF9ICfjHu0IbCocgZOFfcagRBPa2SG0FKpmuulmqz7oGZiid03NxjfeMmmwnC7sm79NKAwpZlNeGEnEnJEB1Ol+BhLr8BoH6rTF/PbzRraR45h8+r9XIfzhPm0iL4IH5d2kIfj01g73vZ5giJs15RXoFBUKza9pdgMUQRYs2H/fQpYyvxBqYY1+mzoQH1TdAjfgVV0sXPlyF4Q7srJLIJTI9ZD86Q+Nif1YX0Nf087qS5LEtkvYQc8/6XS1Lm8xXcAbuTS0i/qP8D7cevUoDXgRF/FfrI+n/mbTJkLsUCHiItxlzEoRvmW+h62inUq2HyjrBeKAR1zhyyklGFzfQbvk7p1d43SoRMPjtIYJ01KbUELtc+sy6w6e5sezabak7H5Xxp7CkQlJZl9Vir0nimFzfhkNoJk5g8CQFbVYM/aSWgMqdLybXS/MnwmFQszpCO8JfsBPIa2oGOOlFkkI2h2SFDKQPt+37x3BPaIMu8JPU4E6RtRgc4w/rUpU5A2g5T0msj/Xi695SvkK7gDusnSGrTDCWbXsU3ta2wSniSbjy4Qp4X3cQMRyPiPHrKmycmwQlaN33C2aOdV+6kjQpuF9ejwaRPlMKoH597pxCUZ981XWanNVpYgu96S5tvSz+jt+mIP1H4hdvpP0lWSUdIo5LMbyMbAj38kFNgoEC5Nrz3cmseDOMfcLswQT/ZUg+HhDlamxhLvcwW8jVxB0Lv00HxZWFGdKo8yh6H1pnLrN3282IxnxuuFI+KO8A9uJl/Ud6UoqNu+LltN5/zpaCF5riUI/FXaZy5SEMaNBPMTFxMH5NP+zzaJVwkfs2951kz9j79q/hvuZ92C5XWM06l8x+lhNvOMui8uEz5WTuhTub/NvWLxExzuXY1Z5w0Qs56s8Mj/ngnia1GEgpHFjaO53M8FKTAfMAYZUiSBsQNaKL7ofCJtMl54+//InfC8dK3dgH00aNpo61Bm1H6yKXfR0gPicYV4/GmDew51vJ1oDzrCzXmX4Cw92Z0WJpufgj3wB+sDCufFpuf2sXcMDNo3tfaQ6NhLpc/uQxXasMoLntmxOdulZaFXvVNx8/B94xHpHbnR0EXL/A+5WO9jV2KS22vMzE7na6QCkly7EfuI3WmfjZrlFxEWxQ/7QbTgl6hndSjG24fuSZkGCG6xIJ4quK3I9anvph0XT1qfezeAhdxnfWdEn+oyT6Bn8d9dJb7YjgLfXcgM9iDOn2t7utmn9EdkD1/UvIkQNpbB3/3zDHugJ1qCK0Gm/jj9n63k3YFH/CPM66hiUK6WYB3BIi7E+22sfMBHWOsBtPwQToMk3GB9D255NnSkrh3XfNhpQH2kiL7azUifivuow2kQYyq1XiW33SSjf3ygPVA65XQWm4d0+NURC6oj4p7SVLwboasb+MSmeGU7+2b5q/oLOYbN4AthDPD9lf0S/oynkUGQaJQFliJEqmfPEgrBN3d55nijN93mz3eEqCLtDbyrHExNtE6TQmp5UBaOVpCpoq/xgZglVHzbq8pqL8BgW6W0g=="}, {"__id__": "ent-d12b5dda4513a0c25b9a3bf4ca42c1df", "__created_at__": 1759092201, "content": "trainer::PINNTrainer::__init__\nConstructor for the PINNTrainer class. It accepts an optional config_path (default None), stores it on the instance as self.config_path, and then calls self.load_config() to load configuration settings.", "entity_name": "trainer::PINNTrainer::__init__", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQtUVGUCAOAyJpPJDT04yAwzc+fOffz3ASLqwu5WG+LjtJpb5rswHwfpHFx3WV1Y96QhR7BSacVmGYZ53Jn7P+9cINENW5PK8tmRdi3I3RD0BMqecvOElq7B7vcNdT5PLsK3+S5cJ5SY7wfDymWWLbpom1JIdyunBaf8ceAaPK2eUXb6TsTeNRrF16S08Kxcyh1Da5hTPaLo3Dd6v6QEfdiBthgr2VW1yiqm68xltLDjab/bOhpUlHF5OqlIFXe0chWCg59vbTUSTLSeNKb+ebY+O/sKWJXfI/+kaHVLNfXZm+x5RdsKt6ZvUWr+VZmilTsfSRWkZoPVcITMAIs0SOvknrjT9PJFvjD6N7ANprzM3RMziKysAxsIzgupJ8xK+1BQbl+OOvBGc6B5pTyESpSn0JfmO9O7OcnMTN2SC5XHtN68Xze/Q//ovR9phh3Cd1ZGao94EQvgbCw7sRldaV4k8OxM6xAS0EXvLf532mq9nxs/MIpXpIZpFb/DOspu0jejk+QVyllxbgGOu80oec/aCc6hL+BGId08LzYRHknn6tcTV+G+/PosbuaLab9XVyvBcf6XmNcfj7uCeaRXLNd69E2gS5r0yLfiD8G03W+/mDwDaugB2kkeDP5gvRVf4F3qqlRrNdt6GVxSy/J6pYf0tvgLvlK2RtnHvUf79D9I1en1yg3GlJS9EnwMXeoczaMHjN8bwAJqLVdKFij1IhepEIvlXdrXPovuTBbFnhavGwslB83SUrEBeIwZYlNwQO0nbWm/AvLWcfdoCagBnX6VW4qng0/xw3A/+xEcAJPRWdQg/aqJs16yT89Ms8vew8qfaA0nsHHah54H41xNfD8hrjtwTFlr9cS3CGvBFXOR2Jr8VOqStyjzg5e4OWkifeAuQhv0Z6Jzxb3Jj9Qu99TOG/IIFOB/QangZSOeK3BnUE7l05MGhyqFb3z18odKCbzBrcfPMId1Qo4pd2STXLCvajD+ZVN3uC33QNoSNxpusD21ZsaAsiLgtX4rOdKzwNG2auNBV0DQ4g1smGjkBTnEQnjzzG3SanRZaUrPUg53fBQZ13mr61BGu00r1JNS46FydbnLYf9CPQd97cvxKfQdnmuNiato5sGfR0OwwRiB9dMfplPgKTiU6FTPgDHg1OvQqNYaPArLgmWhUaUjskRdEd5tPYWek7vZfW6OVQU+yekhffR9oUWZLzwXqQFLzE7PKrEo/hX10vX+Lno9eVotji1kV+GPAYLum7zNs9vkPOujjVaNVm+VcRF2UawF9+V+HEpNTmyXe7ksGpfPx++lEB6mGhhtGQxPEhX9CXonUBAIkwZ5k//VgrTmRJ/jTH4idr3dSUnwLzAu5MsceMCuwMVyj0isMX0CTBamtcDkPOl4IoQb+bvk0VaHb4rdHKiKSGSZEOfviWvI2kAJdkpG9Lz0H3+7fgpsY0PqdrleHIVdmsd/Di0EsZiufsZPTXm5so5wkuLbyknf3/kduCzaIGUiKi3Hy0AmeBb8Lcewtwb3eA6RNHC4l7WW6wMsN1kXfA0CSoVBo8Q86KkVlmg59KAa8P6DyC2j3GaYUCf8v2mbJy01Zwm1qRoJZnfzg2QQvas+ybZR3T1H2itmwax0kepWUXy/dwd+wnNB+qd8JP9/wgPC9/4MPVu6zeV43KG98rex3do0eZY5AYclp7TEvqkeB4sEAbvQbHrEnqZh6RrYo9aiAmuvWOlFsEmMAEn4PLcaXwteinajx9grsM660baAJcQdCQdOWhL5DKh4l9BkQfIF16L3UuAtFH+m9KJS9ZOOGcnFsYXq91KREbFfMquZs8k0XxGH8et0A/opf9OMk12ksa0/uY9lYBfpjSaEr3F78vHA4rwC8V+etbJfCeCv2N3wq5HXKcqtkkr5Y7QAlXrOSz6Ww/bb0lsxcYwehuXC/ElvClWwL/eN2BC7y5OoF4aoP5ppPJpaLA3iCxSE/w/QbKce"}, {"__id__": "ent-6c2d6372894d3acaa31d4527214d6e56", "__created_at__": 1759092201, "content": "trainer::PINNTrainer::train\ntrain(self, results_dir) is the main training routine for an XPINN model. It reads XPINN configuration (xpinn.layers1, xpinn.layers2, xpinn.mu1, xpinn.mu2) and training settings (training.max_iter, training.adam_lr, training.n_f1, training.n_f2, training.n_ub, training.n_i1), generates training data via self.generate_training_data(), constructs an XPINN instance, and calls its setup_training(...) method. It then runs a training loop for max_iter iterations calling model.train_step(), logging and recording total loss every 1000 iterations into loss_history and printing elapsed time. After training it saves the model weights by evaluating TensorFlow variables on model.sess into results_dir/model/xpinn_weights.json, writes training metrics (including final losses, timings and loss_history) to results_dir/training_metrics.json, generates N_test=100 random test inputs in [-1,1]^2, gets predictions via model.predict(...), and saves those predictions to results_dir/test_predictions.json. The function prints progress messages and returns None.", "entity_name": "trainer::PINNTrainer::train", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0ItTFeUCAHDT6daoN+VRcOBw2LNnv2+/b3cPqJcYdUhRr4/sZhIdVER7OImZpRcHH5lKYknjiIGc0zlwHrtnd7/99gFqT5sxFLVi6CHOjehiMgY56nCvt5tQKon1+xN+/zDHwROan2/UHH43Ir6sIwPGXLigiceLXVO0L/2vg0oplf4KXL5rzZs853E7P164JLj4b7RDvifsvsQ22JCzRfwoMswuT+yg1NKdEczb6yMX6FdWH/3JyDLGJ6dzl11XzOdBjXMd7CJn4UPONBqmxckkN9G9DH2R8piQGoUgnn8KDGT007nO7mld0gaHqANxni1FEXxQu6b/5J/Hl+sSnSRtVAZae3BVziuhnUyWXYaz235AAxkaGoENyJ93Ibowep4pAi2gV/3YJO58c4ysbK2nNUpX1si76zSOmwm+ohz6MjeFW4E/in9j1Mm7cI3zKQ2hqaFB+KNYarjMM4doPN98xz2F/Ids5Ldb88Pf6f1Sp1Dp7pYYUkemgP3WBCJw1YgaH2sV3r+IhJ89TTT25jxE1vCyr9v9LbipL1MWsudjqyxBLWTbSZ9wm6nkD5BlWMa1Qpq1w7zDnnVvwJx8wQhIARS2N9NUWoDKfc/rcXNvMiArWrHVoPWj0QgrnNH3C+ukmWC5XI8vS6eBaa7xHOR6hcmsEglb/9dEfVR/hpnK/9PYI6WRCcItakV2Iz8aBXF5PUX++dmDLUPCaaTTY0w912xsRap2M/ttusjbBk/q/zW3gbTcU8xtLSuxiRnK7cdL7c14IRcA0+n/nEY6nd1DLttPiSe0OwlPGODizBCZA+/mqkwtn+25SWuMgbDt7Uiy4Y5HqvTVoaPSIak89rUnRzYZIux1CoTDKA+m5z7nnaCU4MN4uhgTxihGM0gEVPK9XrfULet0PXVbOa3fouOkD97P3+OqFeB53wjyi7w7IUUdsX5cor5Gr4gjhsmfYrb7QiQASoUXUBnqMg7DDQzwDWvDose5KE2NhFApWtw6Q3k1Wav1BSd5F8Pt9C7aB4KxUqWA+S55XS2Hc8w3oiNcobvC65mW9W65VCL/W7kkNVs3CLWOwWEpC2/yFPNV/JN2DZjn3+GOmEWZj4qDygfsVaKbszN+B3Hyjv4ePhOqMf6e2paczI9xx+WezM8T/SBLHQqnuscZVXqJcNU/L/MI7fA9a67FjcJ9TU8KZaZmnDOKYCbzISlmeh58L/IDWYUvAZZZorxKlxgHtbn4E+Vn/SybqaSSfG+KepGuNAo86ajDdMGNzFHwhnyce0meSLao7Rnrgn8Tpib3Ac5ojOW1/qYMaFvEEe7t2D7hU3Rerga77J2GrdwwOv2PSkdRCTuWXY3aFBFBro6B7tnG795T8Sj6IFbPlsg5rolajj4zdxfb7B3v65zSh1Zb17Rb6lamDki2lR6PfRgLiN0aRBlaGbrhWgu3yHnw9eAI+ww2mCfsNdIo83XKAbgCb3t4CO3nwz4tfab5Fm0xi/j08FVnFslG18V5XBtNtvz5LjX4TwexXMHdEBaA+XgB93i0kM9v3oae3T8j2WskSJo823NPuC1zwlDT0ZRG4tBVrcHI1thLUhozF7woiowDn7Ib9PHabi1udtkxsdHq0haQKKzge50huwVw9GJ61HxTv58Z9i2hibyE85n+PY6CHucB6g0Xee7EzuGnpcn1nc4idb26IVHFncAQ1eaM6hXKYuV7cw8KNqd5N+FAZp3zyLEic35TgPlX6AFwDf0YfZCuBbNQibI0+GbysegZ6xwdB7dGZxlz2DhM1c55D3lTk0vIajzK/SL3x+q5m/hl7gv7r06ZbEt53Gu+UKvuPC7cVmrtACzkNqtCskBdSsZcK8k9XAMWkR6+M1yiN6iTdJ6/AO7SFc0vOwluuXvQKnYu4yidMfFzvRidhDW0kl6hR6A/Wc3FaLfxsNDlbotPlk7SX9yDzovQbe5QD3Dt8BY4Zlncz/QVsb2pkDydUuT8Aen4p1g="}, {"__id__": "ent-4ddee719249a28d7c3c766da9ecc4b50", "__created_at__": 1759092201, "content": "trainer::PINNTrainer::load_config\nLoads the trainer configuration into self.config. It chooses a YAML file named \"config_pinn.yaml\" by default or uses self.config_path if that attribute is set, checks for the file with Path(...).exists(), and if present reads and parses it with yaml.safe_load. If the file is missing, it populates self.config with a built-in default dictionary containing sections for 'xpinn' (network architectures and scaling parameters), 'training' (iteration counts, learning rate, sample sizes), and 'physics' (equation and domain decomposition). The method sets self.config in-place and does not return a value.", "entity_name": "trainer::PINNTrainer::load_config", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQtUFFUDAOBITal4+IAW3F1253Hn3pld8Em/vyfSwkdaWmYnQOxBhXU4ZGpalqTkAzUFjZRYdndmZ+6de2dm1zxY4QszQzOSHqbmLxr+oQfTok5JcbSw70tNsGiNpwYNsGrvJf+3Socym63wXcLd8tOgK5aKRsBe8Fks0zOGD4g3mo6h6WKBwvxx1KA/ZdeSXmEhPBseHCwRF1efhGfsNCs1kSsPsjf7G9jqeMEuHhl4nnlTdgk37SrrHfZzaE54k7dGb8anMaZB2MBNhzz+f+Cg1O4rHfO4NEW4K9HhoLErx1h2j7aEDg0oco//Or1KL8jDzGEZO3EdyrV/Y5p3l2jgIq0FOzCVfiRVEJ+0xnVR+kK5oPfiTukU3hVt1J6xZ/tGm6+zbjLHzNCOwgF6H84yRnJfevfCPGkqeBsqZqF3qdaRMc2KZLzqT8UbxOXomndddI8wzkzXnsMHdvY0rRU+pEetwyAPvBicy2O51p5M2qJFkSv6FDPLvmz155xFp1EffDlvP90nDnbvdoVBSni4MaRxDQjFqDCd7RVr8XtcevAeuZDUsiHCaugob9mKZcAIG+/KJwtMIfdbudwo1hpBIWy1uuKHrInWM9YWG+ekGQs2bqMiOseOiePBFuEtVi6vC+zhDzXdJhXzbclfbdtElxkTrMd8t9hXbC68bGcFfzerhEKrTAqFJwT+dl10jjmnZC270PxJuSZNUt8AAZQH+33N+g/0GjsKL9ePjCy19wnzDZF7yXmW+wYOUnLs+xMqv1C9CT7R82HYeBN8aO+l7aO+sT7mn/N2eEYKA5Goujh0EK+Nf8oWRe619u3s8o1ic/gS98d+QxyAKdwkuQ4nzD9xtlye6OZ/8j1spOApGhBbwGxwSfkcFbNn9e/EEqz6eoUiiUoZ6iooNT60+1dlEb1DLOGaQRWNeX4kSahTnkXOsmWGBTZnjr2HBNrMucI69y2jxarhKwPH0WLQ7awK/OJvwa0wAlbER4N8Ikq9BIfHCilAiOvqVDs30IXb9IN4tXyKa7VH+MZFnxRftX6Olhp96gpWFzzIHpPvZsxbFGiwu2Lr7WR/t/w5LB9SgB6lPewkmgSGWnOIiuvh+cbX0G8Exd7MKYylx47HrnoyR8+3Ftp3RHZLf8kqMoUyvVrZmpVncvImLQof4R+W3Ui3Tvj/y6AdE14zupV5ep9vHylNPu/ppL3uFKgbI1A31wIXuUeG+7c31Z7O6YP/Ac12rplWf9NwcIDdy3iry97q7cZ/K8tZKhkeHyeeFp4AldoZh0jTGpN8HEiwvmg+2x9qJkeUP7g1xFEeVUoxJ3GW37edHw+qxtQrEaFCOCeCrE46YBWkxZgJlqFfw6twmd3GN7x3Pr4XTZZcdf8Ts1Es4we1532PMNGq0CEzfYPEZfhda4Y7wbzCcX9d6HV6IrzBSAJlxmi4FB6GGKWBttTvuTZUxapxVGltKpHOiL/AA2TyBwsN075IO9hJdoD2STXgBfdf4Xn671EeNaG34XhT9AyE76xfLk3jv4TrA/dbyVkPiNRU6Fo9n2ykAeoCHwTqnSPBJ0LpsSv0acFm1xUHNIW98AttPWy3rqpnSbHyD1MdOajSMv0GDYJT4stEZ7loMxrA77u2mCu0l/iQGg1W0H5NElNQprbErOZOuDKkKcQvTzAOmZT2WHfqF5hHWa6050wkV8zDtC7e7v3a7SXD1SRwI97prIz/41yTZijb5C3CjugeMA48oCXZHtiCK70fmTtgZViJDLOW6l2wKOtBblEkl6lWAVpCSvEs7XnsjvFwaGIBG0KcQA6C3nO0wo3ABjKVfgK26u+G+p1b0dvZcBGqqn9jTii+n4yNzOeLSCpOZwPKkR0sdsgsll+BnONYg2FK5A/rdk9rZJRRyPb7JmfPlUvIzOxM841wPrhBKtkLXL81C86Mb+fKTc2emexGWviVxG4+SjZ4ZvDXyUp5K/0XQqK0Xg=="}, {"__id__": "ent-ff2dcd22e1ca1d0f96626b9114d41bd2", "__created_at__": 1759092201, "content": "trainer::PINNTrainer::generate_training_data\nGenerates training data for an XPINN setup by sampling random points and corresponding target values. Specifically, it:\n- Defines a 2D domain with fixed bounds lb=[-1.0, -1.0] and ub=[1.0, 1.0].\n- Samples N_ub uniformly distributed boundary points X_ub of shape (N_ub, 2) using self.config['training']['n_ub'] and returns ub as a zero-valued column vector of shape (N_ub, 1) (interpreted as boundary/Dirichlet values).\n- Samples collocation points X_f1 and X_f2 for two subdomains with sizes N_f1 and N_f2 taken from self.config['training']['n_f1'] and ['n_f2'] (each intended to be uniform in the domain, shape (N_f?, 2)).\n- Constructs N_i1 interface points X_i1 (shape (N_i1, 2), N_i1 from self.config['training']['n_i1']) located along the line y=0 with x given by np.random.rand(N_i1) and an interface solution vector u_i1 of zeros (shape (N_i1, 1)).\n\nNote: due to reuse/overwriting of the variable name ub (it is reassigned to zeros((N_ub,1)) after generating X_ub), the subsequent computations for X_f1 and X_f2 use that overwritten ub and therefore may produce incorrect or unintended sampling results. Also the interface x-coordinates are sampled in [0,1) (not remapped to the domain bounds).", "entity_name": "trainer::PINNTrainer::generate_training_data", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0QtXFNcBAGAVEY34DCjsi3neuXfmglbU1VRMRI9gjqJpaqImUeMxWkOtNjVtE60PEk1AQERcdpfdZXZ27sydx8ZoNYGDJyC2TRrqg2M0tSfx0NSjiBorSVtLq7bfX/jWWyfg/RRUvqUXpWPMQvipPCPea0qp8dXLhLtqE97IfVFUIuWjDvi5eCp2h9TCZ/A/hJ3oWuNJ9KzTrW5UPo7chp+IeMqbZolTnVPg1Mo70uPE8wUTbDl92AommtJBMAwF7Y7kkLqX67F3cqPTGmHIVxFsXk2GxXKag19Bs9Hb05TEu7k/d4JWyfSdeJhtp/q5Ovk8omA5p41bUPiEcKTgmvG31uXudn0h2Rp6cPRJuLZqNTfb3Ydq6OTAamsiSuGRwmH9sJ1Na+Ai9IETAFvSHueUO8a6oRGwDSwm80iY6GSB+zzeNXmDvlcMhKhxS+hwSwUJPkheism4wjhr9cN74eyGH3NBMIpXeZsoRDVfQpr0uTlNRrl/IZ+1vGPuSfwntEFsJ17jBriF89FPC5+0KsGMWFRbz75pTNTrYFAda01CB4xa8Q5QPX8Wv/EyrT8Jn8ZNfIu4Vu+mxWC9+Q7t4GTBU4SUbeYb9HTgR6Lob7bT9gM431Ohj+O6rTewQF9TqshxfjdsNcvcXuGCHGvM1ecpK7kXYCkty5+vB60MODv2Wo6Mtrml8lznK71P/TvvaF3YVPuM/Slv4ZTI69ZZdRrjl8qQn9R4K6WdFt+8gI5CfSDcYjE9hQqJkY+dWvIFyoBy3r/oZlADN0pZ7EuBD3xHUi+H7hITX0isTn4LesR1fCspQU8Mz2cq9Vm+06LfnkPPcWF9lX6cK3UGYt8Il6eVwaHY+OQ9dUuyK/0Y7OBM8TNvhX7V05N4HkeKQKTK/qM4wJ4EQLmtjlLfYrXkW2YDXeMuQZ20SVosN4KRRrn+ZWwH9YkF8AGpd/sLrsbqlTvSRVIvzkiNwANyVJ7Avg4yxEP8n8hd9HbRtdgiucmZDr9kMo1Hmq2+D/IRSF1RjcBZ2GldScblxThD5+Q+41n9kvRPq8/7shSFv/P146C1W+6MlFo5+Gl6gq9j9ogfKe3cHDHLqBBXuNfIcmZL8r7WbV5VZtBKHHSe8hUXLCT1rDYis+FV7TC7f+pjrhjW5SyNzcvLJr/1scB1loFJvumRP3j+yz+kgnUBTEoyYA5uYnfhgdRz6oD/hLJK3sCUM+2RA35ZmCC2w1uo02OSNnIl0mCecauNbhLSXmXXyRozkeaZp2im+JRRrV2Pn4crpOFGkJ2VSlONzM9fynlBOfiB4LW7yUnuEQ9RdUTO84sdQtjpk46Grf8PcTrE+yEEm9FB9gxaaari9+JFsBetlNq0bGl0bBMohOssWeqPHpQHYXNeI9nAHeKW+oP6VjtXnKwtiwVont0CqqwzIHIoCoesNqHHLUZE6gmPdF+kB+AYWBQPyTekwXg8kVs4y7cLn3d/lSjlUqElbsqqT+6m18lzgLf7QoPM7fhM46HVi0YD1lfKdOE6+ZgWgmeNKJwof6RNz/aFv0tu0kbTIe3Yka+lPa1zhWJtH/ZH13izjTW0rLUDx2HItwo3Rwp9262x3h7usfGecVm8ic+lR9ndqSx2JnCNzc779BcFmQEvuZ7czjanJtAShSXbfJtkV+o2G/j7ooTORR6yt8T+QCA9xWCJKI41Fyb3oCq+0RpUL9NPQIYS4vYaGfgmLNd/f+yVD+eytgLtMcgvLWEP0iF9uNpujWD2aSP8I1PVfKQpQWcaO/itQpl9SUPmEbYSeFoek+9ILSXGbyJfw03pKvtnTleyHLpwkTsYx8gThbrAbzGuU5/TFlaMuHpKGzaVEazoD2OfkvkwTDB7tKYfd+p/TSj2L5OUZDo3PSI+HjuIVpCSQBczl97jeukzdf+Od3h+TcZTTu+FWSRLIkZVa5v9IjKt79mtQpsWj0VtbnyF5VMeTV1rq1o4/T862pn3"}, {"__id__": "ent-9b8ff968788b2e9ea2254110635cfc71", "__created_at__": 1759092201, "content": "xpinn_model::XPINN\nXPINN is an implementation of an Extended Physics‑Informed Neural Network (XPINN) built with TensorFlow 1.x. The class constructs two separate neural sub‑networks (layers1 and layers2) for two subdomains, each initialized with Xavier weights, biases and a per‑layer learnable scaling parameter A. The networks use a scaled tanh activation (scaling_factor * A * pre‑activation). net_f builds the PDE physics terms: it computes network outputs and derivatives (first and second derivatives) via tf.gradients, forms PDE residuals (f1 and f2) for two different forcing terms (exp(x)+exp(y) and -1+exp(x)+exp(y)), and an interface residual (fi1) enforcing continuity of the differential operator across a shared interface. The class also computes the average interface solution and applies L2 penalties to enforce boundary data, interface solution matching to the average, and residual continuity. setup_training creates placeholders, prediction tensors, composite loss1 and loss2 (with configurable multipliers), and Adam optimizers; train_step runs two Adam minimize steps sequentially. predict and get_loss provide inference and current loss values. Implementation details: uses double precision, a tf.Session, tf.placeholders, and explicit initialization of variables (TensorFlow 1 API).", "entity_name": "xpinn_model::XPINN", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwNyntwFOUBAPBJaiyP2CQKSS732r39dvf7dvcSYjvhFXCgEYxAXqAMTxGhU0kFHISAolgYHlIgEfK+y97t3vd9++3dXgQkgYi0IENarBK0VoNlQKoZjGCGKGEgEGl/f/8O6qOeuAVK0SnTgjMPnVT60U+JdyLLuHLfWHCVJYPdYKuGkYDmwbsCjM7KqUFb4GzXAT6cHlMoHQPaUBsISR9y35uTrak87yis2zvUbrmD9mazpz2YqA7PsQ55ishFNuJtTe7n+/GX0hGn3HnRecCdBDoJhZdyGAZkl/JawSbhM9cK0h76bUFP8Lh9xy6wGJutveU9r/8JlwZngz9YmbEz6Da5qbflfQ/vcZnkk9x1sbHJSfBGW6lapWKUNWEK+H2o1p4v5HJc+J6zUT7uVLMapy0+yS6Bnb55gTK40K4RJoUL1A+UhdIirFtn4GqEiMs/IFeS5XlnkWM9571DDGOX6LGekl61fcEKXMFX2FBbCfuaoZpHr+DJ9Gk2yuzKPR0q5kriktwZLEP1+cOsBzS3dktV4e3Egq+wT6xjsde9yyQdT2n4PGIIWfA632Of9/ANX2nd9hirnwfs27iRl0R96gowg0bIaadLPgLnvLsOT1ae9ANaF4e4TtOimj0ENkotaDd/Cw+Zc7WW6Fg6TcyK5oIcR6Er2J1HFoyr9O/jb/C5zs/C/qZqI0Xe7rqc5xeWKjOlD+J/lUabN7iQNl37seGgd71yT89WttrHoOxwqIwvkAR3kXUtp4i5pSUemU+KIXkId3iT8nV+Xi2HQywJv6Vh/bF8v+9f5jW92/yn2UxPgom+aHqv53XfULjRzrDXCGfpRbmCG7RTIk8rA8HD0R0BF8RKWPiGdcGAd2bwZbSBbvHt4Qrkw8EmVGsf4BbJu+FHYo+4RivDNNBBvyD37Q5trTNe2yR+rW7jm8KdQq8y6ElXdfFLxpn1YgX5DLqVh1IafAq+GXic88GAtFZZTYKxxWilzJGd6p9jQ/AmnQDFwE1WSTNQCdkFWlsvR5aa+ahcngYeiH+x1ifLvXPVfexDo1IbC573bcvvkuq9pboD/ujZQhrxIsyDEdWmXRl94jCZn5hBTsAMVujksF/DTFwptVu1kQSxAxH8ApklnXKdh79E3pPTAoVosvcNPccg/KeNW2hz3td0hdgqLQdr8CibwVT+XqALloSrRWIUM4SHpRFhmzSS3dC8aoyZTdE3ymGyHVZYP7AivAGw6BsgDrsbmT3B6K6fYV8mjXQAn4hd92xTBrlXXRyo4kSrlxZbv1MztKnkebTXOO0pdArFLKUjsIM/3zpVe88m0QLtQbMjZduj6bEgVdOlxVKK6NPiQj9Mg0tYr/Cr2Fv85t1O+i5KIo/Xp5MNwgC0xEeV40pzdG39UesVI92owkG9ATTht11ypJilgLBei2Y5e6VUelQuJOfk2bm1xmp9SqbPBIHloEVcDPYGN4n5vjou09VHesIvW9/FbpPN9Cqeg39Eu6J7mvrdg/LHbJwaUu43tOZ+Kv4DbQe/UYoUN6lV/hOdpN8KX/J3842kXSoXjpDp9By6LRd7+xJ1ycLWThwws4JPim7wpnwxHkN/Tx4yc5IX0MrkfOcKmOvU2NPss9oCdM7B/OjImZjJN+UNJB6G9tffNRNqaRTqS1REDzhVdCr8GbSQQWDBl4TlTq6Vj8d71PDOprnwBLnmrDKXce/zF5SUwCmuGvxN/MVucW4kjtKBBodWBe+jd6JltA5Pt/dZFixp/gIMG29bzyhQSjHStInyo2y93IAnKhAX59ugJW5Jqf4XAp7xV5OPOalSJ+yAP+Bn292JrUpRtseKGM+gm/UD9kq2A4fUq/paS4HTo/eBn0+NToyPsK9CVYgeZP4LjvX/c1dMa5LbNqYsg5eMd9FDCXP/Zm57p7KDrDOG8eeshj0CVrMFyn/bgDnFORr5LnaJTZAzPFeEhfEcSbTL1FXj9tjjhV7nf+pAmss="}, {"__id__": "ent-0399eabcde19dbd7b80c70d46c34f109", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::unknown\nXPINN is a class that represents an extended physics‑informed neural network model. Although the concrete source for this entity is not provided here, its purpose is to encapsulate the full XPINN model logic: creating and holding the neural network(s) used for each decomposed subdomain, assembling the physics (PDE) residual and data/boundary/interface loss terms, configuring optimizers and training hyperparameters, and providing training and inference routines. Typical responsibilities of this class include building subdomain networks, computing residuals and gradients for PDE constraints, enforcing boundary and interfacial continuity conditions, performing optimization/training steps, and offering methods to evaluate or predict fields on new input points. The class acts as the top‑level container that organizes model components, loss computation, and training/prediction workflows for an XPINN implementation.", "entity_name": "xpinn_model::XPINN::unknown", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "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"}, {"__id__": "ent-10c01adac62d06f97dab1b185a70bfd3", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::xavier_init\nClass method that creates and returns a TensorFlow variable initialized with Xavier/Glorot-style random values. It expects a size iterable where size[0] is the input dimension and size[1] is the output dimension, computes the Xavier standard deviation as sqrt(2/(in_dim + out_dim)), samples from a truncated normal with that stddev to form a matrix of shape [in_dim, out_dim], casts to double precision and returns a tf.Variable with dtype tf.float64. (Note: implementation uses tf.to_double and tf.truncated_normal.)", "entity_name": "xpinn_model::XPINN::xavier_init", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0YtTVWUCAHBBVAwUhYv3cr1czvv7vnPOBc0aH4SaCuuw7lTiilajhrJArjWWuZah7U5rYQYoIhe4j3PO/b5zvvNAx43CUNSmB1g+srbd1clt1MW2Qd3ZNZcyder3L/ySbivs6/SLKrZgffIHMSSOOHNoLV8Od2j1+SXqMPNS/p7EKHiD/VA00GR8FvwemfAIc0QclKq9LakQ2CjloRN8tlXn9TEL8QpqK5vcjlTQOkoO92wxC6b8jY5x9iaW0Fgq6e0TFtpvs2ftburHDaFxcA3uhyOkSD6kjFfLZ94C3wtxd2/PqZLFJSvpP+Oc6QtelTbzS0zP2lvsgF7yunNUnkKm035pAt/WPiDlS29IWfZtKVtoBYVMcXFHSUTdQLeldpnTwkHQ670Et3Z3pEyryi11B6YfFRVQwFRQn7PB8O9ZAMczg4Vpzj1Shep0g0mJt5xj+nYwR8/oHise16LSJkeCfyDjJNtBcK41HwDfWi4tMmo32wregP9OV1l3wQP0N/hFVK/GlffkV4J1QZJSuDbrLvWz4wrWUWJ8k1tgl+LL7PVEDJ7Xr6MF5jbxpvFjZJ39sFcjnXRPOPuTD6EjqiyLfIPTyLXIL9BamqbvBje1bwsQqAbL1dNaAP8Ee0XEveL/ayoTZqNQeL41oK6iLwqtTj99y2o3WuPZIJ4C6oAjiF/RQ3AAn7NYOIxOyzNQjMbgu3AOWoaGfQ/SGnjK3M54wT77OD0d1hHm7oEDytPCObTMnN4OhXv8ROEMW+ndZlnRli6aa/G33GvgYSPHnKXk0nJQTePGc6LNVgG7eTnEYY2/iDfbt+wdCFmNsbL2StqHh4WjUnXAx12jl6RsdVHBDtyvvKNcEJ4MOGRG0QfoVfWOMpZWGJfEP0c+ie5GT8Hn4Szaan5DGK9BLbXT0MvyfHiIdBm/1uqFBcwVozn7jBWiczVJmYJ5mG/k7Mvk6mBOjFNfhn9Ssqwsexd3VZykFMGI+6h6x1uhrsSnEhYfRXVkvKVofwGNOWtz98OP+Rv4c+aC1WL6oYo7qKIqZILYElnX2YXGe49z16RA6nwyhi+JLaqudUqYlMq1bkAYkGY7mY5rJZR2eylsscbS8tiTZq6ZgT+Q9+CZ+Xd0NlUsl8V6mcpERlGf8BZ3UkigkRgJJpWt7ReRYwyKw2wmnCtf5NrkTtyU6Cl8Aa2GHXBqUb1+jXk28S9wXHZxElRZYW9S3jP7o9wQ6iHv44pkv9qYEJJnUmXeTGZLamqkzDwcb0zeFymdQUboM/Tfwml2J1cnlEQ36kvwge4bbUPCoHTXiClQf8gmqCm1hsyLL7aOFVeqgFsJysl/4FnzS/EJxOKrrfmSEUNSp16pM9zq1tkm6bohbwOYX8EH8GK4fPqv6GOxWfRRa7IwqDdLE8k8pyuQQdL17+g/YDrdiWjXKNtMjhkPKtfhp6S3ZaTw/C//rxVf0SpAvtwJ7kXPF650Kaknz4KQvYv2s0P6JbBIDMNF9GDx85FCzUdGVbC7K1WrpiW+Sn4s1dJR/vNkBukA59x0+TK5n9hk/xR/U3s1utUe6DlEf2tqgk+dK28OzINj8DT4X7wxMcZdqq5xvnC/jpxwlpLqcIX0vbwVFyefo+l0ZuFOY8hbn1gYf9oIimPsw6kBaXVovfW/6LDohi/rU9EKvj5/H3mPX2Xez8qzL7c3wavsHa+KTKJ/tM+IN7vDWZ/5QpLqDPYcc8bR93nNjbFtQpvmc6P4JD2QqJGvFM5CdVaB0wSPuw0aq97lgVUqh0Kr5S3kO3U+yrGDYm5ogjy5Y9rBNU6c3c5G5GXsI5afZMqPxHPhTv53zD5t0DpCet1d6CMyUdiksJ183vp4gxa0X/fexgulg4Em6tGvqS7XkP8n0tUanImfmPaFuBs1ObO1arutyAeGSL05h872QKrWKlNu+SGsttuZbuvL5O2ON0kevOBMJh/6HWBrtR7D++nPUjCUoA=="}, {"__id__": "ent-f5751352ec86921de458fde4a7d89ab6", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::net_u1\nMethod of the XPINN class that computes the predicted solution for subdomain 1. It concatenates the input tensors x and y along axis 1, passes the combined input through the class\u0002s neural_net_tanh using the parameters weights1, biases1 and A1, and returns the network output tensor u (the subdomain-1 prediction).", "entity_name": "xpinn_model::XPINN::net_u1", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwNzotXFWUCAPBcSgVFk+cFLvfOnfm+mW8eF0ktoLMqoSjH17poPgK0bXePVscsNVwfsZ5VWwNCQNALDPfeeXwz3zdzr3WUsu1hddQiD6ZQmpWBnWV1l0VLdiU2dd39/QW/NlKNu7Va8YecedJTWnXwIj8r3hD4FajSZtE+tgT16jUg7t2h7IfX4DLSYA0JK8AfxW3m70kVfIWpQieEbzw30NcwiU+N61aPWUkbwNL4EVRLzjjNsb85K9u+tyn/vrnBzVImxPfgn6x09PdYWizD9FlDXDerTmmWf/1wBDWK9fnf0H9FiyMva7/Mf1jKjyeDg5E6VBa8KEyGm+2k6Zn2ceu22RdJw3XcTLjR6D9YkD7H/DH3Z3cb8x92alayMEdWpndL10NvmCfY1eLRwGeUBC6TGmGQbO3kvTXsTmUwrVExwLGsZPZZLcbN4FQ7hDf4tzAlbq33IVRAS9Q26SRdG5iPdpmfGjvIKvg8nRscbU3EK/yJUFVu4hE4QK5Hl9SDeAN+N3JLvxPgjR54LFgmZOQ3mXetlaKsBBjNlbnj1hStmRsyU3wrw3PRDfu6vCDaxCyJ7GeEaGEwhEdwmrlJx/TZ3KdT80RZ4jIO1U8LPSoPsO/mlLkV8D4oiuVDSorFIb8aboB/9j0AACo2t6MuaS563byCY9YnVsiZGh6ghXaCdQyck5rksDsDPB67iUa1UulC1iNStzgsauQl4UXmMbtZOii+AfapT2SuIX+SkhKvNG3Es8F4oVT+TBxvTrK22jet9+CqCKONh0fo4yqnTCN3+QWanw+KBe2HweXghgZZ7SN3IM/Ntwtz9oGT2f9tHBR8tIv62HroMTbnjmg3jVR6lwko9zoqIm8Csb2BL/atl8rbDkjLxZ3kD2qqcVXuU74USukr0sR0UchX+iQaPJqeB+ajsP6QOzuIyE7hOXmG3IF71X7uVTLPPm90oWzyD0ZGE0IJyh4kSuvassBVwOk8O46/hE47YZJgymh34otiqPPJ9t8Y970B/h2bgDHxBHvHaRH2uCglxFfIqrQiK2RdJ12e1cwE10Rjyg9ymT1x+jNgt28hnRa9zNT4PzLXG7/TSmUz87f8Aq4K9Lo/wjRUTgaNDVoRHHC+lBpJqb6EDjPDmkDGoxIC/n9dxa7XWzsuIUXPDPf79npa2q80gmgC08yuwaz3UXeq+DmfzX2r9OB/cli8gGujD8r96i42LfISdyVyTuuDIWmtVuc5a5fhUes8X2HwuVssxKwxx4Fy80B0r5Pjvkap7xckUxwFk6xx0SKH67zB3dK74BRpshRU1uU0SW/Zk4wtvkpeEAbY5eI2utu2xPesf5tv4WGjRfk+eGryskC5+I6wDlawz/OB2DPMX8kRZKeniM8JT9HFcJNVq1KpV1SiE4Vz7WnOKi4pvsOcEXiByWbPNTtkvRYhw6EeGoSldJeYKTymLEIeMYP/wvpJ9/BPkzGpmjsb3WelKMX+T4HV3h/dAQOwyMzP3hhNAfcjRWQmV42rxO2+MeED3B6sV2rsWTGPqactgl3oANxP6uCJyM864r7KTJHOkl1MD/cxfYB05y3MXgc2k2/xQu8xWztcpwyGi/mw0BobYDbFP+SrjVnKRZrnDvAf69/FjpuVfLLS61SSQmzBeULUGXAiII8M+iZL1Dqk18Aeuu3oBd9pttr7AQZaAvZnjLpJZhIhZNmkvepSrsC+5szmb0d6wF+kI7QLfiEskG9hw33bTeZPwvN2hfQ5aspIjflpFZ5J3zy0PXyP6zR3+h4hr4datGr5WvikeBiFvac6tpol0/3RS8zV3I2alCN4Rt3l7mpUx3N8jbofw9iQPOibSuJSJeylc2I5HYXYq+RZZ4x7UjXKEBaDmswYOWQ9QY6jsLEC+2Kn3Jcxq7cRzIuqaixBD6Kz1oiRaJ0mPeJpb4rud4roa/bbrLellU8wWplebczp8y5yytm9RgFeS/s6nzRKhdutI+QMw5D/AejemCk="}, {"__id__": "ent-5fb3c96ec1c26abe56059b7b9a77b49b", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::net_f\nComputes the physics-informed residuals and interface quantities for a two-subdomain XPINN. For given interior coordinates (x1,y1) in subdomain 1, (x2,y2) in subdomain 2 and interface coordinates (xi1,yi1), the method:  - evaluates the two neural nets self.net_u1 and self.net_u2 to get u1, u2 and their interface evaluations u1i1, u2i1 (TensorFlow tensors).  - computes first derivatives via tf.gradients and forms a gradient-dependent coefficient c = 1/(0.05*(u_x^2+u_y^2) + 1). (It also computes d1 = 5000/d2 + 200 but that value is not used.)  - multiplies the raw gradients by c and takes further gradients to obtain second derivatives (i.e. computes the divergence of c·grad(u) via u_xx + u_yy).  - builds the average interface value uavgi1 = (u1i1 + u2i1)/2.  - assembles PDE residuals for each subdomain: f1 = u1_xx + u1_yy - (exp(x1) + exp(y1)) and f2 = u2_xx + u2_yy - (-1 + exp(x2) + exp(y2)).  - assembles the interface residual fi1 as the difference between the subdomain residuals evaluated on the interface.  - returns the tensors (f1, f2, fi1, uavgi1, u1i1, u2i1).  In short, net_f constructs the nonlinear diffusion-type PDE residuals and the continuity/average interface quantities used in the XPINN loss.", "entity_name": "xpinn_model::XPINN::net_f", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQtQFGUAAOB8ZKGCo3DQiXe3t/fv7v/v7mEaWZrUkBUUqUGGifYwa2wKy3xA5ptkjCBCA+HgHvv4/91/9xYkBFPKfCRaWugITkRWFj2oyNBBe4xOfV+10gzKQY/oNefzK6wklCVmUoe+S/qNCcwV9Sc5XTsojpHnwUKYDJdb300ugAPob72Ff9YeC5tVF3MaJpuZ3Bp2RmyD8xTX02zRo3xeyz1iDllIBq3zdhoZsmvgW1MP2YQ/Yu1lBswt0NP8pf0nvY3PAtkpx9QOb4q3LNCFhjNusG+mf40X0t6MnWhWvN7Yp7VGh4NLwY/wAfNWeQSPileS9dw8+lHo+6YO+SyOMLvSfoH/OYu47bgOneOmgpen72AWcY12aFq3OJP/Kv4jOmGv8GbaeXSSO+QfBV4DxajMdvMxowZtl19FpvGp8gx7E7dGf4YZI43WGAFIx0iEjsCbaR27JFwhnFSWc6uMZCNCIAzBQmubvIb9iBZhTCSNAYNYQ8mkWMia/j2XmVHbXCoeFa6jy8xKs5aLeVOMXntXZLfearRVJJEWkKO56n91FfGTSaUs0Rwq8xv8o2wknGRi0qZAUP3As7qxCMzjxzuf02Jxcrid5MT69RvwCL4bDwXeEU7xMd9EOqK1Set8jxpfKgvsBQGPM9PfR/MVMXwYPwEGwTrbiyrIjjSLr/A0WQJaIS3CqXaitM+6R2kXnwiulZIJk+6yeuVBLQO82nwUVQlbwICYSer1UvodziEl8CX3nNhbztlQq7QQXw7MM2Q6jnspnAcjciGoNEdwPv8X0WjahFPwFZ4FvOcPOBB/Hp8VPlTbfN2Cz6pJ751aGzxKJ0d3w1VwNN5Fk9BOoostUDAlz+fq+0JfEEmLDB86oK7Uz4lnYnfJc/3jYZ3rC/oGPiRiJyOYC7GY65sTXb9nkN8NnkNLuJ326uh4cYHWJRcK74hXhT9ROerlTjQkAEn8GEfUSmkAVfl+RsPaJpBtvuk5oX2MQWAkVMI8bV7zruWB2wceFuvkXC2RG+tc9qe6l5rnmf+kbLindlmQsNnKDVxqyDWIKWEKAW3aL/+Oc/HD6RbZaB+zNqS6SZl5nFzkx7GZso43RoLGnYGflHrTx19NOg8/pdWw2/+y0Aq2m1tJNtFwa8UdfKfANW3WC8xbzGt2Afo5uoEdjVZE96FQQ0JiB66BKLyMP+d/kZQYD3Eh0ZYa+HxhL72YqusjSr6e6n9SbfZfjceNBGZIrcY7zB7ybuQffx8qAVHQb3TH7sOCspU8Iv0Kf+BWwX/wZ0qK/Zu4lXsBLvU+yN0iZVsXGAEesMqF4XgfmSs9K47ip/grcY40J1qGCsAyu0vods9VuyP5/iKsesrJNPAAdon18LTUA28mafRbfEG5jnOZKnZi9HdvXDOqw3GL6yT3i1zLfuNRuhhsQ8NglrLRSPMfD+l2Pb/a1wQgTQk+xnTtmW/WuJfgF5jh+HvWJ1U/2L3qb0ZyeKX1eIylWNLse2E7U4ovjWnjAiASWC/eKp3ziIjg5Z5LwnxrhjA93hi+I30viaj9aZ3RwwES/7Ypr3G/kwVSgn+hImE8KjKvMB3ODGaK04lubz1inmEHnYh1Wl3Fb5MOOrL5lDOkzATDJjHXCI/UXjC/kTxmlqIFt5tftZxRS1EC5tSVoAG8HzlgjdDXTT++Du4nYwPtiuDcRd7m18ECMUXrVMrh2mkXjcSWWS2t+oPCbLJUbpPqyB/2vbEeA+iE9ZtirBh/k9rOX+IPGgnBLcmf1E/iT4LEqtnRBrlIe41sbnwoNZObSzucN8xrDZtTXPwC9bS92DnAHTJfsZZVX+WyouudYm1aeLZYoOn+NvEX0s9OILPFDFLqClkXhA6rB7c7xdYVOpEf8l1kF9bHxU2c7jsMj+uF5k30oDwlnhdaTDabA3Wfga36FCbmnbnnTPyUuyv+NH1O7wgneVykD+fTcfIk9l+rDLDm/8R/qbQ="}, {"__id__": "ent-de2a49a7cca9b27b47d1643352f64460", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::train_step\nRuns one TensorFlow 1.x training iteration for the XPINN. It builds a feed dictionary that maps the model\u0002s input placeholders (boundary, collocation and interface point tensors like x1_ub, y1_ub, x_f1, y_f1, x_f2, y_f2, x_fi1, y_fi1) to the instance arrays, then executes two training operations (train_op_Adam1 and train_op_Adam2) on the session (self.sess) using that feed dict. The method performs the optimization updates but does not return a value.", "entity_name": "xpinn_model::XPINN::train_step", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN04tTFGUAAPBKfEC8BHwAd+zu3be737e7d1pGmaSJZeGDwEppAhNttDSnsRTELNOGMjOVp3Bwj318u/t9eweFaYZYUZaMhVNOTYOaVk7NMGQP8UEic9Xvf/hNi53HsemH5AasKO1aDZsPf+iIe5O4SrCC7Z3ep+Qox5UtpAiOiZtC33j/DD/X7s5MlD9Ql7cVwGpyiXkWecWv+RHL5SkMX21uprVOM6qhc0IP04Dxc/Ruazh1Fv3UNeCMOGlwVedF91H1pp5AS6N7omXhBa5f63RmXvgGWgomwMaZv8E4mGhOiy2bmeSTYvNds4y4eYqLi7ZxyHzMfx30Rv7Snhf6W0ateOS8tkS/GrhmH+QLor9LtXVHeBZl+o759jPfB7rpqOe98HK+NHYCPGldwm9EzxCFb0ON8LiZBE7iaiuPGW58yXtMMK0nDNu66ROpP7WV1x1/zuPmKQt5doqPaP6pz+B3xCNkSM6KAZaLvOjdghbnVStV1s+ulaCSTrcrheutF+jCWK4U8BUzeTMabIMtbP8XGWILnpHTZCTGXqAcbWYMLJvl0qNStnGCTzWa+FHvgPyVuUVfyjfYr3IbrWR4RXlLOOpyx4bJLeY0eZlW0VLgaRqwzpCZ2SeNJEhoGXec2SU/raZbtUqV5DPi2mx+G1iDFrXWORzdpOYzpcZIqAVCPR1+2lqAVk5p07rDq8EVETnV1gPoPlCIFwlz5EjdW8YGoc/+FXnINW2H2YDOCfenJhv16AU4ZEjBuWC8ezIoArs632NL4H70uWMGtpH16AJtcOYrKfUb+MFQCtzENZmdjAoqhHNqj5Cl7qNz83rx7SSIXQbrquJPCxe5r51B8UW9ry5dTib70TGekdZK2Wo5V8HmKgnS1RkqkwHOik/BesEjPyh/Cb61a8gC/GzsI2YOvl85AHslRMfl5UbmKeGMZeJ26GXc4ifWu86D6AlhCNQLy8A8ynrHS2eyFnOGtS9lPUqDpzxlYkpsq7IFI1Dm8mkHQrv5TWRxII/kMMTuhTfQFFAYbWupI6YqiPlR2fpF2AErvP3+WewrMItucG+G9XaP2RItCn4plkWmiDXGZPF1pwAgOdkOkHV4o++EHYeD0XySbS+RsmgtGNSyImPCEKm1uz17+dlaUUA0JLFa7wXbQbp4lKz3dPveMEqcHXCuNSKuAUWe10CNWsluzgkq94Cu4DzwcOh167IexhkiE9iVHekA0bWkGZ7jv2ifpm0kO82JeE+GK6PKHjAGmNO2BYf3RsCY+zVwxnhIE+2beDg1Qy7NbYqctXbuWxPt10sQFW8Xmpq3+g7jy8F35b7gR4Glsa1Wo4/4MN/Nl3sOcP9oB9iuunX65tBV7jjl8Soo5Z7HCMvW4OQE7QHBf3Cc/hOsqzXFilgmnYB63BNdA8GV4X/4vdaf3vnBkOdv/Rn5F4Jlzip++3DONjZTWRha5eHEHLbTHo8N6TLv4z+Acc9h80awg8b1k/xFZwltpjvV+pZA9s1IZSDZocpvynbhX7Err8Z9OThXPoQ5yxSzaYGWB76r9+GRSJbrY3uFcB/1K9+p/Z7Z9ofREXxP+C660I/ECvoNnwxb4Yexz6b34CsS7JzppKJMawyzdIFypxJ0Wq2hplW631ZsAxczk9FY6y3ftehs8TZxlmtc5wymhIXeBnOPXAxfgo93tOC0thX6bTynTwKTUK7zpnUHGSFT4TpLVxNAOTzqHOmEzlPuCcbz2lrhGppi9BjLQk9zo2QM7s5dAf/A5daP8mpwSbgAkuAfwbB6lvNG4laJ9KiaJS3n7xXeRF17r8e+tYkwSV6K2lEimdpRLRxsnEDOu/7y5uu1+JLwHBmndJlp3GopHj4Gbc0b6iNP0lG49v+xQ1Z65zvqQm9//fvRz6TDOFEO0kLYBL+wF7UreD2a6BhsqSWSsyBBT6Hp0i1ziPFGE6cWR/3mI1IXSjNLYyPTup1ssSrM5e4Wgs5//EOZfg=="}, {"__id__": "ent-8d222a38831a23248a39bfdccef66338", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::__init__\nConstructor for the XPINN class. It stores the provided layer configurations (layers1, layers2) and penalty coefficients mu1 and mu2 (defaulting to 1), sets instance constants multiplier and scaling_factor to 20, initializes the neural-network parameters for the two subnetworks by calling initialize_NN(layers1) and initialize_NN(layers2) (assigning the returned weights, biases and A matrices to weights1/biases1/A1 and weights2/biases2/A2), and creates a TensorFlow (TF1-style) session (self.sess = tf.Session()).", "entity_name": "xpinn_model::XPINN::__init__", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "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"}, {"__id__": "ent-59109235acc04efe35b113cfb306d3fd", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::neural_net_tanh\nA TensorFlow implementation of a feed‑forward neural network module that applies tanh activations on the hidden layers. Given an input tensor X, a list of weight matrices and bias vectors (weights, biases), and a per-layer multiplier array A, it iteratively computes hidden layer outputs H = tanh(scaling_factor * A[l] * (H @ W + b)) for each hidden layer, then applies a final linear output layer Y = H @ W_last + b_last. The method uses the instance attribute self.scaling_factor and TensorFlow ops (tf.matmul, tf.add, tf.tanh).", "entity_name": "xpinn_model::XPINN::neural_net_tanh", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQtQVWUCAGBtB5JqQzQvXLiP8/j/c/7zuF1TzMykDR9kKBqasWjrjJhsreWkpeVo4uiA7ii7xvN6L3De5//PORd3MrK20kRDA9REJRU3MA20WbPGNJWsvo/HJVYK+ElYpP2GDsFCuY+jyMbQdEHnIsp+7WchQ0Z0vGmrcAhcD5fGV24vqV/GX4P7zHuaKtymlqhl/D/8xfJ4/UtD9cLvLdE/IruFpDvL3oTT3ZKkD/PBZOJjrVh5AF8U0vekheZ4F8ynXN572ykcZ4SHtKtKPnVM7OLvE65Gv39oYgs2/+P0RT+QZ3q9xhOJW2qDwAm31THZadEa6pSVjVXBNd8EjwTfBhvZYnqxs7Lpr04Wmshe0OYKBfLM8efQXQxsLFiJbP6k10b36kfrOt3RdgW24ADjgQVyiRI3C9l0eFOYBasSrLdJ+7tE7APU72C1vd4cLaapKVy9PTswlbmBL6AYqZA3O3upg//MR8uEX5U98i6vmaoEEG/z7jdqWt4wGp2t8udyFTwYySUDxmmkSVv1clwveEa/MQBJWAtFjb+Ye6kl4il9O1pA7w8UobrIFf1JYhuXzQr9YZONDIvTUQc+Q7621vIzAocDh/xJYYteYk5oGRevSqyWR2AG3WYyeJt5UQlJg9JR6mWrGx7HBp/jNFgjzE9gnnJY66aG4PNetGWHU4NSG8+qS/lZnE+8JxTa7wlz+QvgNema2KX6YH/sscSD3LB5xrriqo2NXAB8BnOp02N7jErA8u9Yv9Pz+CHHsXPQVeUzOIZbFgNyKtnM/ybNNL9AbxlqCAV8ejvTb60NbwVf8UHrGzwa9oaXk0vU5Zoyo1wbos+iVPvlrMGcR/iHmRv2avR/aaZUKYzE/1X7zTgKy5O54y7tO89RLGW44lkpr/ayWb8735WSY+VJXoq4WLyNpjir2G9ho7Av7NeLwCRbtLvo80ZI7BJ9wU84SD8e/J9exk8L/1majUvNTrbEmKJKcBI5BiV3W2AI/ct5h5sLPXPYyLcv6uVmDhyQq1vmUYVGpvuU0qYtc1bgpZEDyhX8Y/Tm7pOhSuf9xpSMc1nX9VfJKqVMitBV/CDXzcXJCpjPbcB9blVgmzRoBZrXkk+tZ+1cVtE7jftBvzleCpvt/lLYDNcwvTbNnDbXgXf9I82N1i90BBWgLDDVVcX0WLd4TlxnlvFLmiwtyt6S77CL/Dbd0DA8Lj+nFMSYhfYP/CB5BR/BTWgNWiwPsYFEgZeuVyp7ghl4BImZ/8YAbhZeZ3+yYlxPi9+oNW6FN8HvAAm3RjqNFeJSfJKF7ClmIXhXGyW+YDH4c3FO1hlrn52G6+WFcrUSQSloMhrFl4oNaAE52pyXeD4+1Wnn81qm6lPgYaMo4xr6Eu0IUcJL8ScFwM9LDuw0glasER63MH4h4SN1ZqZTESonlDjbt0Wc4W0Q28RvlDbpYzDGfMW6i3K5BHj60WnhPHgAISBCWt+OsxNrQiB+yqp2Jgm51nxQHIToEtkr74qMMmpq17PN6Bi/Gm1kU9GnYty8q35rPEZv9leQYKCW2aE843RExqAOps0Z8B7HP2j79B50kTsbnCNUUPfJf/KKjAkeJ5d7ma0D4IxtY4b0ytvASvME3c5OUIdAe3Mffitbozu074VWKicToyT50LteF+WmgyK1j9sFTsD65J0cZLkhn9HODjPzR/a4P8ePkP3GV/zEwB0qyacJ0+11boENyUHTR05wHzCjMr8jnDUxx49/Qa/HKuFFusCWhf7GA/pHQpvEKOloJTboOnWRlAox3im86HwtVuDJyXL8JlfL7Qw2sAP2Oe8lfgaYPK4DDYMeq4qUNGeYnVIffg7eEFex56Ue+6adgm+60SYAn1aOmN3Je6FUGnE+dTkqtklzNV0gjBRO1qv4kvMMqq5frpw3tzir3OXsivBVaS47NtBKKLyhaZrbyj8AmhLEma//zX4wsJBdg7tC68kf14KiKw=="}, {"__id__": "ent-2d189612affcffa2386347da90a63121", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::initialize_NN\ninitialize_NN(self, layers) builds and returns the trainable parameters for a feed‑forward neural network given the layer sizes list `layers`. For each consecutive layer pair it: (1) creates a weight matrix W using self.xavier_init(size=[in, out]); (2) creates a bias variable b initialized to zeros with shape [1, out] and dtype tf.float64; and (3) creates a scalar tf.Variable a initialized to 0.05 (dtype tf.float64). It collects and returns three lists: weights, biases, and A (the scalar variables).", "entity_name": "xpinn_model::XPINN::initialize_NN", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0/tXFFUAAOCKpDINMWBx3WV3du/M3Dsz25KUeETtaA9LTSFByoBj4QvStNSg0vKdxyhYXsKyu8zszp25d2Z5aWIeTUVNTxkGB7QsToEv8ohYWplanfoLvp8+nTzLnGp4Bf2LfWKJ43CgQ6ql+3kiCOOy5ZnsFGnYVWdtbSznz8ECfp39xcBt2AN/k3hidSbC1aG7jaPhCOYM38J9rg7RXnoM55EoZzbvNpbRp2hGs0KHcCuxGYny4fr1KQPN34MOfRBWajMpEx0VfAZ+CtNc1e43hOsIS8tTt+MGS5QkmEPeTG97dJf1S1qK13LxkrdqTZh4TnJrwxSvFPbb+pQ53JT4ZQntHGWuK/HmLPaAO5t8yR+AodQqMY+xgslcnfIcKDZt0vM0me3RSvE27VGuxJdjP4SOgCJ90P8tTmIS4SXtNOn1e6S5NB2dg6xzHe1lZ+E7TqhlyT61RK3WfopO5UeRkyyjNQMvz4S90kP6V6ocV6UsoCa+F8ymvLFXPCLNEzZ4sPs2TXNlSZn1R9VXuB/JpohFlaBk9jOJjkZHN1skvyzZorGsC+qSRNKie7HP+EsfYjLQIDJhjbJa+0E7Dgsj+/2FdIDvx+/gAQdv/R7eYNrUD9EWJdXjkvvVpVASi/VHyo5xeebN+lj6fPB9Ghtap5X750YGxdJoK/umsVCwkL7ALnu/8w0mEx6hdSgHtoZOe7pABT2eMAYUK3PqNmqL8DUiMldgNp/OA/WWmlHXhOXANP+J+p+ZtuYHYTD0nV+iqe4cxhijKXPDG2EH7RJVZYS2TpmxdQ83Q75HzApuYheR58xY+XG4XrfodeAJZzcMAk7MDfzJ+4x2cEhYqu3jlzAjeRPNqrghX6j70HVayEWbSY1jJbsCTICr+DWgCMTgPfRXQ28alsrUbtDJrUAoWBVZWBMVq0El9LiiZi3e7JgMrOgBNL8mVUhH85Qtrn5xDbyL/qZPjEplW4TEJLvgMEqlayQf7ombZhZ8cpDboacSIXRfpBM3wn8lJizW+3SrcTjog+fcQXar0C0PhAu8vzVMRWdoISgIzgo9pi42bMGjrpdCtwNzxS4wyswff15sIR8Thp8t5tNp4DU6HSaZ9wfijDP4GGrC74KylKmRsf5M9g/1ln8CfzX4LHcHFMkn/L2gAXVUnoVZtE+6yeYk/8JuC02CJ+oZUqR0cPPVjWQc49hcEe4Mxwvx1hu0bEeaIpt+PE/azbrBCeZmwhjyZ4qpZJMHSB99n4hqDExmk2sr7YgT8O/qY7b9wAquC0vdx4VrZATaiX9HVy0HU6aKC4N9iCEn9YmcYNyytrkvkD7PFE9Wbbs47HpauEfvSnkYzde83ET714kfYV5aoH6d8jpqJ0cRC5bBTnkm0h12dg7PGS61IHzZ+ArlqS0KVeMa1rCLtWz4Ai1Jfsk9W1qur5UK4HolBmbAbjlsaYcTrJFAm/igKx1e4nejv/j3QouVsQbnXO86H+0yVwlJ/0udgQHmcoPdw3hqhB7neG2Auws2gRxSqC51xZCA9gW5yl3kLpqZ6IZ9J6nCnDjEbODnEI8RG8k3InKclIQ2oTQeBc+Jk423LVeMK+IzVbn0gl1sqtFj68vhBWDIhYxjm+QsVUaCYmPnI9uc48MvoorKD/QFKCNsUt94KQBJhQ3zZ6W3qidFx0IfzapegQfFDjAMSsmGyOxgW6gNDOn5smqrZqZH7U0dZMf/b5P1Eexm9DYpjzL0sjUtcBO11notGewCbIAf/MkOmwCch0mu/WxdmjqxfrvnG/oZOQ1b6Umxh7MbPeY/3OtsGxwdvDfaixsgCIxW2+FWuKqhWHUiO3lKyJW7I+X8aPoq3KV144vUQctguv2K7qRes4WecQ5zt1QRxWMLN7KxHUxijuj7VCHiZHrB/NoZ5inXSq0mnBA6LywnJbajxp1xe51Pkoj7BXZFxGksUfOMGGYf24V7XLHR/wA6OqGT"}, {"__id__": "ent-f4587913907d5232dc415c3c395108c1", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::net_u2\nnet_u2(self, x, y) computes the model output for the second subdomain. It concatenates the input tensors x and y along the feature axis (tf.concat([x, y], 1)) and passes the resulting input through the instance method neural_net_tanh using the subdomain-2 parameters self.weights2, self.biases2 and self.A2. The function returns the resulting tensor u (the network prediction for subdomain 2).", "entity_name": "xpinn_model::XPINN::net_u2", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0YlTFXUAwPEKSEFNQUDgHey+t8fvt7uPJzkeNWXK4QFdpqiNQClFFijWZBIMKIKWOh4IxPXeY6/f7u+3u8xYaBRlWmYeNaMl3RGaYnZgA1YW2pj/wfcz3xzSi+fDPuFlsgW+0iWJmfuLu1/y5ouZzCBSqEOguSNaXGUeDTwHaD7hnhrjMWqYHwZXlRG9ED6emia/I5UY2fy7qYmhlVY1uUQW4072mH2N9ntkdLV7s1kkr454GEufbhLY351PuugiNtE5ZWtWtWeFPxeUqiWAYo8Ij8Ilwc2dHuYHnEm+CSZKvzs5nq+bF4M+Lj6Q0Ow2kjL2GUnaGAnx1cnr5Jkwb1+9/an4r14qr+1uTLnSNaQcSi8MhIJtUp+8sUPnvoItrjoSDWdZGjDwOOqCt5V7FU7npoFg+nJ8hd+pl8Kd7iH8sOn4NViIe/UosT/U2bIcxIZLqGIuqE+1TuIwdIdbhSRjV6KJdGYu+BIvk/4hb/mWc0utG9p7JtDrfCdJvjgIvxG3Z0wwjhgPCYel59NPo0H/oCrKv2lf8G7rLMW23IFnpn22Zzw/bHiZAt9E8br5kdZPpvlukRxF56eI58AB0qP8qZzgD6MR9QqpYy/FFzta6hdkgI1y1+Bohgq5mDNJ243qwFb4OkNbc/FZbdj1pb34jWF7ame2IYRn8hEhwRkBN6yN8Jge5GLCXcAWZ6hv4CncJs8Csol7EdrsE667XJUTffxWUIUTrZ7YOiiCHjCIKuLPG5mknCrjct29vqLuBeHLrGYu6oxPvos+wxZ4av2HpF+QG9kdJ/z3ynndldwf+6FYSY2mbEDAjoXrQxGS2/Y4dURuiVyN7JKKQmEsAW6vnz6MsoXT6DcQlxFrDXjb1a+FbdI8PmBlC7+iPP6a8IrQAgOR2ZTEb8K1dlyg0c5mR8WdTDlazR5vnZM8j93vvcXGOKeSVe64uSgQYB8BZ80fhf/oZP08FWH33Ba/g01wJ/xFGRJT0WIuijrYdlldg7uYAnjZc8B+v2uHfRO18nXgnIzUOK3H2i8EtULyNpfG1YjTlVvBD9kUMUV9lpqnvqS+GRbS3VRE3EKvhJfYKLTV/p2ZDKa2PIu/9T4jZFn5sMeoki9avfwD7Bw9SlmHVvJ/q/NT16Ml8BOKN3LQUYR9zem79C04mqulzxlyay8OCIVsPTc+sM2cAYvpmc4abbZwzNzoT0R6eBZuo58UHP8eUqOzOJW8gI8I09gt/tJxRXq/3dc6hiYxrzmi3WRVRHarnUIn92PHp/oVZdzELE921wV2heQXR8US/2eBpfaAd4l+By/TeaF3/Y1aKb7ODKCh9jyDI5o0P1Aaus+lwDnM58wExks3WBXu79Cq2y8uCCZ6BFezy0LMFE58U6wHlr7XHYPG06PdLahcLTdvMg07DDPU8nH7+2E3WUGfNvslr363kA8nwtdgZXIV/V94MtMEHwap9Gi4X9LcY65qI1Z7jofNo8aT5NuEy76K9jHyXVO7P4cDTU/TCUZBYIOYQB5U8lGUHgOusfvaQkhpKzEy4hp9V9MbfcsI9F+HGThGrxc89EaQ4+wz9uKgNqM5K7i2+QPuL8Xl3KA/755EbzauSVutk/ZksRiXmSJK4CSesaqVh5T48A6pMrxLK2WimJBeLiiyN9UlFKNtzghzANSGBXKQpuiD7KB9IyUKrUEFaAJqABUoiCmp3LswmhZmWz5fA5PFMlaG86C5FCW5dnPHOD87y33RrsR3c2VkKvOV5yl02MxGq/WG1rfVm2Be5/HGIbWxK1e/nxoDJ8znPWu4OcYBqVE/6WQYYaafyaNOoZ+d7U4iVacs8XwvvujZYJbiFKoD/8R7jNyOLHYuG6+vlTP1PjSA0iwGjjRNxq87ZaQMF1JVaBNTm8bSub4UcVCowpr5j1kPFnIVWlFklnUc75DPu9YJMtksP4pD1pnbbffASfRKqgJJ+HsSB1cxyWqN+yj+H1cmlYk="}, {"__id__": "ent-5bd9a3f2e7736e40d8dcbae18b81c2e6", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::setup_training\nPrepares the model for training by wiring up the training data, TensorFlow placeholders, model predictions, loss functions, optimizers and variable initialization. Concretely, it: (1) extracts x/y coordinate columns and targets from the provided training arrays (boundary data X_ub/ub, collocation points X_f1/X_f2, and interface points X_fi/u_fi) and stores them on the instance; (2) creates double-precision TF placeholders for those inputs; (3) calls the instance networks (net_u1, net_u2, net_f) to produce predicted boundary values, PDE residuals and interface-related predictions (net_f returns f1, f2, fi1, uavgi1, u1i1, u2i1); (4) builds two loss terms (loss1 and loss2) that combine data-misfit, PDE residuals and interface-consistency terms with weighting via self.multiplier; (5) constructs Adam optimizer steps to minimize each loss (train_op_Adam1 and train_op_Adam2); and (6) initializes all TensorFlow global variables by running the initializer in the session (self.sess). Placeholders and computations use tf.float64, and the Adam learning rate is 0.0008.", "entity_name": "xpinn_model::XPINN::setup_training", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQtQFGUAAGAUFTU4MsEOOvb2bv9/9/9390DNJLHxgVaKrxzDGE0bIotM0zRxfGQ2pmClpwgi597d7u3r3weohZaWRU97WVSmDlqhaXXgKEwMMmXa900jEaaJk3Cd8YTg0B55MLriPHrgGruZhXSP3Ru6FL0j3g5MQ3twxsA+5pEclc7Fc3gl1kw9iE8bYXUmtx18DImfkocST+Ms96BRLqa72XKtMjZrllttDU+UOysPnNQ85np0zprKDCUDweimJfZZazolBfODa/XN0c3sEFSDwwVN7JTaq8Zpa3tBWn5FU4Pzqr6CbMNDoU+aGz0cqkYtRtI6ymXrfvs3X6v2C1APdmR/X9/S/JWwBZZxOeItfDLfhme0ldaUwOrIBarIus71kxtKcfNA8oCFUJhd4/shQFseozqwQ8qEf7JLVdNYFPxG5MxRcLUoGI8FU9l9xn4yky0d+bc5Tgkyi+U3ReRcBZy9A2fh9t0jQrOMy9rf2pJokuTDb7zF+iJymB8fEoRkQTc5B4rvtUCcvRG/A3Rf0uwxCf0MOKfdE43iJEo1LlHdWjcYHMwRF+uD5U+DA9Tb/ofoZ7FH2ANDOnJ7iQ6WU+eNl7WlfKrVoDW7X2oS+kNuiRY34qCMZ48Yo7fACfzNWIvv7rwOs51fYyTrftT+0rYq9ZqpV4KxJB8HYAmwpetK2MfxM/g5gTRyUqxVNvtt/jLexZQwPrjaHYHOkWxYRYJoCW5NTEpcpCW4qjYZH6v9LGx9y/H/a61lytDHzE5rhZFi9rJ3yE/EDHn3VjZ+yPXDrkCn5qVLwEso6fmIu7+uy34tbwN31R0IOmpzyWU4jM8P3TC+g6u4Nf7HxQ/tdvQoVSLMx2JM1KE2T5jMt+bT8iluqncAU89c40Ihgd6odOvXjD4yHu9y/hOK+aeFQvsUM0qLiEgKcwbcS25FU/Z0WPvxXyDCjs6YiosSEjzKAUoTjoEi6zN0F0qhfmeb9StiUFmBdrM19sr4tMQgfV+sXxof6CMAtfBt3MbIBO/TTjZayb/jvKSeEJ+ndGnC6G1shXBEvR5Iw5Vqg7eKQO0F/Kx1H9xYW1//mvOW7xb4VD9ubYA9QnqslH+ObCELSB2YJ+fpCD4lbZL6YUjOYB5GaYkxiTs5qcaZxoasYjA3uEE+H3gSyfcSqxz/EzsJP8JVwe9xUv75QDtYByerx0AD/EWWlQqNUuajQr00NskKOa36r/RReAimM1/GJrpt6tloTfSK/qYRBwvjpcHprAPXZn0LNjUc06dajj0yMJq7P/cCyHBb2YfcicH32R/jFt3FVfFNVJuyAGWag9RF1hZjT8GyUCFy6QqcJwy3C/BaZjl9gStRU3TDOwn59Nnwc+mscZCmWCkAfZ3UMl+6H8gdTp/+L/s4vY7ZbZbS3fAzogJBWYq/MCcy160+BN1e32nlvH4TLwy+ono4Qq/2/JNiiTXBarYc7goMSV9O11jl5B3/cXeIuZ7gOonKjOy31nH7yBHhKq7NE/GJYdu4QY3v8dX480Qn59Kd9cvYMAmTcWYCTDZS9Hy1kP9EeR351CYnYMc0aCwSB2ODG8NeUWeD4W6Jmm1vR/OaH3HK2MO2bPXa1/hheL41krxInlO2w0MEmB4oZ9cbM0MdsjdeFDKi1c2dGae4SGKGvkr080NAt/sJuWgK5tfybQULqeiicUhLN06Qo/wXiSXUAK4Hea0bTZdIulQAtmpFAIiyUumuilZq/dI97EKYwZXomY7mb/Pq4blsCB0Z/vuum+pkNF0vFDrQA+QMyFF60GPK3e4b7qb6b3GX8AaodPa6O/mD1E59R6KK+UDv2T/K9747DrUF5oBGnEXC+Ja3U71LPm1VcXHhtrEgz+9WqLZRAk+QB/mLZlSMqO/Sl1G7ElLkRItYZq1vyFTa3AG5acoG7TguI7y62D1On7WeMN6lVrCRRLHdqQ3SZ4ivqF3y27mnrP8Bkjieyw=="}, {"__id__": "ent-4d55d765de307d4b3df36c4a38ea080a", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::predict\nRuns the trained TensorFlow session to compute model predictions on two sets of test points (presumably for two subdomains). It expects X_star1 and X_star2 as 2D arrays with x and y coordinates in columns. The method feeds the first column (x) and second column (y) of X_star1 to the placeholders x1_ub_tf and y1_ub_tf and evaluates ub1_pred, and feeds the columns of X_star2 to x_f2_tf and y_f2_tf and evaluates ub2_pred. It returns a tuple (u_star1, u_star2) containing the predicted outputs for each input array.", "entity_name": "xpinn_model::XPINN::predict", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwFwQtUFWUCAGAMwgfhnuCAwOXeOzN3Hv8/d+4Vl07FSZRc8aTkGoHFZkHnRD4orTZwWU3RzV1XI4+AKRfuYx7//PP/MwOtbuoVTVHRUndrWc3VtA5ZnGgr083wwUH3+/YTD72Ymx22oyrItI/Ki4MzaYN4CLzKHcS9PDN9HrwhLykYk54S5/Blvq1mf/AxWJs5H9WRBUIKeZth+dc1BXzFn92xyG7i2tXNrqOkOcdhzFmIT7pHrCYyga7QUKTErpZWuFOpEz9mtdire2rsBvIEt4M9k+sp/EH8ALwlVBf1mVNRgz2pZ0ZRhVJv7UWI/o37CyiGVbjL81PoZ7PRutwe9mWhUnPtO9eFDFyeKI3t1Y72JGAPKxLCpIQnFzV7h2iHNVuCID3ocU6Bha5gPknLYx+Tr7Ru4Sm2zifbW61UfYC9AvfwEG/als83y3VWKX9c2kG+U3eyh/PH6E/iNUw7PiUd4a+jEanQPYmzEx/6f5ZjvvxQvb4+MEMtRbyVAi4YEXqG5sSHlA55y/TNtgj26IzvZXrcvCjOw7wx0WjVFoijWmqOz+yVZyUO5r0tVMK0tivhwfhptJn3Zm7RFD8PTyprQDk6HatW05FLr9PlsS6pLpGHFlsNLBYqjc+MP5pnJKAczppjLlSGg8P+pJkueO008Kx5Ap02JvA1/hHVYYfAAecZsWHXZMJRgR3V0+S5wXSai67Ki9gR9RNPWH5OPihmtq2jGcG50vPwgtMb0KUIOCCE+HFm3Bo0u9kq38dgVPuXdZ/39eD2xCS7EteSbWDQXsHvBv9DH9FRzoXDgY3mJa+Pf4Hxuk08g1rsXdvfjVn4MW1+4SMkg5P188F+pDMuX8u0Ct8jIA6iEngJTFE5ISO2BRxRfqP8GC2PNnFnwTfyVXGWIohlZq5Q5dnsXgG3CpLgvPIkLLa/b60PPC1XG438PH8o8TUe9bfh5lCD5BO95LJ4C8zX3ggcFY/ID9pxMhu8gk1mQWAjKvUNmfUTMvnPjQqYIpdun2KRSFegBGyBQYXtvLhtf+FkQnzXSGNvGOWLxeZMM6lMIUAGXR+hN5hKY6Uaxv7AKVCs14EBfp8wYDfDy75l1HYWo0FQa+4Di9wZ9K9WpjLdKlLXMGFUC1ZbqiiB8s6XwEskV13I3GSSzG1mEemy1wuzC3vac6wZ3Egelb3h6eQcv58p13+FbwWXgiyJaH9HV+RN4gsF/4HFzn/he1EfmWKdM7JwmfS+u48+5KaJa+lK4TsKnFjgceQGxLadwgX8bvR5Oo6ypYoo8e8sWC2P+B7FnJTlfsbZ8YuwHbUI90NPYI8xAC9gnqjkjLUd6qHl8ZvgVuAH8DCqFJZ2XiWNxrP6ve7fGY1svjXKyvxh8Kr2BRgAJj9UeFpNgjY81R0lN6y+/FR9rXBwV5m/zj2EX7GfAGn0DpxGf62M6Z8SFrd07oaR4B3xH2C3ulfMxC+Gfy8+IiWjCGYIpepb1EMiGyd2zsKp5E3mT9q4+hwTVUfI48GlyiS3n6by/YlVhRak/B+sDfSmx/aPxbp34thut4qrtpdyrTgAWkmu8gvlaTqd6TQk/h0chIelibCZHJL22rfZGxaUMp0HXBDkHcseth4NzZEuoQ2JbPOBSI7STU6pJ/h7OGEdkesLlmkh8D6+v3eZ1BdoY6/rZ4V1+jqj3n7Qvym+Cm0QR4xTgS/VVe7neTwTtmukIrVPXwnKpGPu+p6tPfX6bWFNpENbzKehKL1j1gTusuelabEqf5O6Hx/rWm6/Bu8Dw7BPPcd9Yb7Gl8TXy9vkdcaf8w90F3L97dnqPR3wRfJcQWJKnSU9SSFFPeFdItVlJUmVMxktIUZwPvnA+kRu8X3LPoPeY0b8Y2ZazvngtyRp38Uj5C6pQFn4EEhHT0sl3EPd/zSKDQmHMVQ6tTH+ReLQOP5RylMzQr/Fv3gjdsB5B7/pVsBrbTVdsunFs+LfTBtn15qjerH2fxVyp6Y="}, {"__id__": "ent-d12fdd8bf842030fad223294368df7c1", "__created_at__": 1759092201, "content": "xpinn_model::XPINN::get_loss\nBuilds a TensorFlow feed dictionary from the instance's stored training/evaluation data (placeholders like x1_ub_tf, y1_ub_tf, x_f1_tf, y_f1_tf, x_f2_tf, y_f2_tf, x_fi1_tf, y_fi1_tf mapped to their corresponding numpy arrays on the object) and uses self.sess.run to evaluate the two loss tensors self.loss1 and self.loss2. Returns the evaluated loss values as a tuple (loss1_value, loss2_value). No arguments; relies on the instance having the session, placeholder tensors and data arrays defined.", "entity_name": "xpinn_model::XPINN::get_loss", "source_id": "UNKNOWN", "file_path": "custom_kg", "vector": "eJwN0o1bFGUCAHDBC1FSBISWZYedj3dm3nlnWLy6szJC2w7tQw98OjEJriTqSfMjhUhNzZKUsBP0CBfY2d35fmd21rw6Mi/vFDOeSgXUHn16LknF8InKkkyxNOr3N/yOxrn2YfPTgh6+H2bbp/nr/NtxEc4WnoSlzgvcYMCmJ6KEexDdDGdbAf3O1v9wV7lKSYrP6LwAp8ZH4ADEIDZlgTmHFex9phcvsuspMX47e9U4Kq912fDfzENWNvPyNDv6RjTVJY1VcMm0Fe5Ga8QVyBquiPd4l3RuRj+FJTZ9+nWhlTzj/sUunn4NnbY3TN6n9ZOzlZWe/+ef089Ke3P7zVO4Iu/xUIbxnEejg84gX6vczyzYE4d9IRV+KPZJemE1vIVzba90mRsSsF1NfdK5Em7SK5wskxaOS77IXN/H7HHnfP7s2Fnukva6tYFZ558klcrJxp1iudslpyQa8ctG/z97Yu9rSfnPFKRRebDBXaIXq1vCH6iQuebfZhzWg3ANPqJsA7OmNVkr8ErxT9OL4P6CUTy3c6tyDWU5tXgR/MKst6bgGmsH7wEpdr81KHjxPOEuW2M+I5eKrU46P5C1H5/YfiG2eme78CUMoWU653wuj2lZcddaAXt3rDK+sWrpH/JXyPP1mdyn4FEwoqbgeriEfSL6X+Um97NJo7BZZ39gfWsOhsU7HqHH0FzrFqqIJfz3dLKJDLkDfQlnOKvtcraQIzxj/G1oPbU3rlPZ2t9hCZWhAvtX4TW+QC+l/s2/Ld7hJstvglrpBcHfVuUmC19w95CL3TH1sNInHHRK4Qx0y1KM/Xnr6HfYUT2H7oWX+Qn4Pe44HnaXApqdH59nvU4cUEtQBGapaWq6nGAgzBTGu83CEP1HVCYd1lM7/kr0Sq9Qh2Av/FfOFfAiM1Xo44cERrtM9JuUKuPr0QK6A52WbuO7nCtqjt1ID0U2CaN0pdJoQ2LYml8gCmeoGGg0nzMnSE/RSeIAuBwLMhvFBraGOoL22LvRgJ7E+shUpYsLChXmd1a6kcXKkW/hDj7M1ntb7PXkRXgo0u5e0g8Jd+sldKV0IlYjncOjudmo0N0KIu4M4y6p3EgSlil1ioO7hY/zpkSanW/oVYHN+kIwzh7vPI97pCT8lbmcf4nZItbYe70WNQaxsc96QkiFlfIkagjtAj7/I6GPpOnqSX0181bMZBfD8fRCpoytJH2e4bxi9TzwGpu1xbGzoSbfs23FOCeUHCettN//NHET/Je2J4wG3B07Nf6CQjqZDsX8z2DAND0DZUSoth0d3ttb9Yf1G8xkoZWuUQ7gajEzUSbOI7ZzIqxu/UyoYp83FhO7XF1ZjmfaLYEbYjM4TXd6ytjH3CuA4ybKTWzYyNGaYEL8ir6Ja5U6UKQFySoSgxIS6Rv8VbnH4pPNbSBNuCrvTO+BdSAQqvDP0t6LRECy+JYro/cn7mVOZpa1e/mLanMk0bGoZRRQakBcA3JhHdXNdhlbhPmGaHaAp9VN0Ul6ITgKfNEH2ZZ81X0QnYG/4HepBer3TL3ZQE3RWqJabJPRFi7xd1P1fJGbL5+K36snu/dZUfi1OoaHE1WahS+aTxY8BVv845CPseC4Pbfkf+Af+WY8YvdBwkXmOlYnFgqrHJp4ZXcPblT87qsN7Z7UXYVsudhnnW89yaW4PjdLuFv5PrrVYIW15KCV7JYqD4ByPRvmOlvyi2MzwT77R4YxOwKHc1PUc1KIJxJdTiCumLPomcar9NPEHOcPWqAliKqJrfAH/gJfQaRzTfDe2DH8aO4NMp29Cd7VCxCyl6JBtUNug9vVIHxDzjC6NRGy3G4xpD/mjiRIppQ/5zzOfY0+tydFJ8cqcBCaSrsioAMqqZ8wjmk8zrTKlBv5tsU4TjzHfsjaCAbicWYdzUtVu5chghDUInCQ8YjnnYfM9VRQ+bO3l59AUNIR9E7nUewYQ8ZabVfaVF+VsQbnaA3sz2xEXU4+ix9WfgPD05eh"}], "matrix": ""}